// Generated by CoffeeScript 1.6.3
/*
# SGA Shared Canvas v0.132830
#
# **SGA Shared Canvas** is a shared canvas reader written in CoffeeScript.
#
# Date: Tue Oct 8 13:20:03 2013 -0400
#
# (c) Copyright University of Maryland 2012-2013.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/


(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($, MITHgrid) {
    MITHgrid.globalNamespace("SGA");
    return SGA.namespace("Reader", function(SGAReader) {
      SGAReader.namespace("Data", function(Data) {
        Data.namespace("StyleStore", function(StyleStore) {
          return StyleStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var docs, options, regex;
              options = that.options;
              docs = {};
              regex = new RegExp("(?:\\.(\\S+)\\s*\\{\\s*([^}]*)\\s*\\})", "mg");
              that.addStyles = function(id, css) {
                var results, _results;
                if (docs[id] != null) {
                  return;
                }
                docs[id] = {};
                results = regex.exec(css);
                _results = [];
                while ((results != null ? results.index : void 0) != null) {
                  docs[id][results[1]] = results[2];
                  _results.push(results = regex.exec(css));
                }
                return _results;
              };
              return that.getStylesForClass = function(id, klass) {
                var _ref;
                if (((_ref = docs[id]) != null ? _ref[klass] : void 0) != null) {
                  return docs[id][klass];
                } else {
                  return "";
                }
              };
            }]));
          };
        });
        Data.namespace("TextStore", function(TextStore) {
          return TextStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var fileContents, loadingFiles, options, pendingFiles;
              options = that.options;
              fileContents = {};
              loadingFiles = {};
              pendingFiles = {};
              that.addFile = function(files) {
                var file, _i, _len, _results;
                if (!$.isArray(files)) {
                  files = [files];
                }
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    if ((file != null) && (fileContents[file] == null) && (loadingFiles[file] == null)) {
                      loadingFiles[file] = [];
                      return $.ajax({
                        url: file,
                        type: 'GET',
                        processData: false,
                        success: function(data) {
                          var c, f, _j, _len1, _ref;
                          c = data.documentElement.textContent;
                          fileContents[file] = c;
                          _ref = loadingFiles[file];
                          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            f = _ref[_j];
                            f(c);
                          }
                          return delete loadingFiles[file];
                        }
                      });
                    }
                  })(file));
                }
                return _results;
              };
              return that.withFile = function(file, cb) {
                if (fileContents[file] != null) {
                  return cb(fileContents[file]);
                } else if (loadingFiles[file] != null) {
                  return loadingFiles[file].push(cb);
                } else {
                  that.addFile(file);
                  return loadingFiles[file].push(cb);
                }
              };
            }]));
          };
        });
        return Data.namespace("Manifest", function(Manifest) {
          var NS, types;
          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt",
            "http://purl.org/dc/dcmitype/": "dctypes"
          };
          types = {
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "item",
            "http://www.w3.org/ns/openannotation/core/hasMotivation": "item"
          };
          return Manifest.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, flushSearchResults, getSearchResultCanvases, importFromURL, importer, itemsForCanvas, itemsWithType, loadedUrls, options;
              options = that.options;
              data = MITHgrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              importer = MITHgrid.Data.Importer.RDF_JSON.initInstance(data, NS, types);
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                that.addItemsToProcess(1);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    that.addItemsProcessed(1);
                    return that.importJSON(data, cb);
                  },
                  error: function(e) {
                    that.addItemsProcessed(1);
                    throw new Error("Could not load the manifest");
                  }
                });
              };
              that.importJSON = function(json, cb) {
                var syncer;
                syncer = MITHgrid.initSynchronizer(cb);
                syncer.increment();
                importer["import"](json, function(ids) {
                  var idset, urls;
                  idset = MITHgrid.Data.Set.initInstance(ids);
                  urls = data.getObjectsUnion(idset, 'oreisDescribedBy');
                  urls.visit(function(url) {
                    syncer.increment();
                    return importFromURL(url, syncer.decrement);
                  });
                  return syncer.decrement();
                });
                return syncer.done();
              };
              itemsWithType = function(type) {
                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHgrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              itemsForCanvas = function(canvas) {
                var annos, canvasSet, contentAnnotations, imageAnnotations, specificResources, specificResourcesAnnos, tei, teiURL;
                if (!$.isArray(canvas)) {
                  canvas = [canvas];
                }
                canvasSet = MITHgrid.Data.Set.initInstance(canvas);
                specificResources = data.getSubjectsUnion(canvasSet, "oahasSource");
                imageAnnotations = data.getSubjectsUnion(canvasSet, "oahasTarget");
                contentAnnotations = data.getSubjectsUnion(specificResources, "oahasTarget");
                tei = data.getObjectsUnion(contentAnnotations, 'oahasBody');
                teiURL = data.getObjectsUnion(tei, 'oahasSource');
                specificResourcesAnnos = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(specificResourcesAnnos, 'oahasTarget').items();
                return annos.concat(imageAnnotations.items(), contentAnnotations.items());
              };
              flushSearchResults = function() {
                var searchResults;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type").items();
                return data.removeItems(searchResults);
              };
              getSearchResultCanvases = function() {
                var annos, canvasKeys, searchResults, sources, specificResources, step, teiURL;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type");
                specificResources = data.getObjectsUnion(searchResults, "oahasTarget");
                teiURL = data.getObjectsUnion(specificResources, 'oahasSource');
                sources = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(sources, 'oahasBody');
                step = data.getObjectsUnion(annos, 'oahasTarget');
                canvasKeys = data.getObjectsUnion(step, 'oahasSource');
                return $.unique(canvasKeys.items());
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getRanges = function() {
                return itemsWithType('scRange');
              };
              that.getAnnotationsForCanvas = itemsForCanvas;
              that.flushSearchResults = flushSearchResults;
              that.getSearchResultCanvases = getSearchResultCanvases;
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAReader.namespace("Presentation", function(Presentation) {
        Presentation.namespace("TextContent", function(TextContent) {
          return TextContent.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.TextContent"].concat(__slice.call(args), [function(that, container) {
              var additionLens, adjustHeight, annoLens, currentLine, heightSettingTimer, lenses, lines, options, renderingTimer;
              options = that.options;
              that.setHeight(0);
              that.events.onWidthChange.addListener(function(w) {
                return $(container).attr('width', w / 10);
              });
              if (options.width != null) {
                that.setWidth(options.width);
              }
              if (options.x != null) {
                that.setX(options.x);
              }
              if (options.y != null) {
                that.setY(options.y);
              }
              heightSettingTimer = null;
              adjustHeight = function() {
                if (heightSettingTimer != null) {
                  clearTimeout(heightSettingTimer);
                }
                return heightSettingTimer = setTimeout(function() {
                  var h;
                  h = $(container).height() * 10;
                  if (h > options.height) {
                    that.setHeight(h);
                  } else if (h < options.height) {
                    that.setHeight(options.height);
                  }
                  return heightSettingTimer = null;
                }, 0);
              };
              lines = {};
              currentLine = 0;
              that.startDisplayUpdate = function() {
                lines = {};
                return currentLine = 0;
              };
              that.finishDisplayUpdate = function() {
                var afterLayout, currentLineEl, currentPos, i, lineNo, r, runAfterLayout, _fn, _i, _j, _len, _len1, _ref, _ref1;
                $(container).empty();
                currentLineEl = $("<div></div>");
                $(container).append(currentLineEl);
                afterLayout = [];
                _ref = ((function() {
                  var _results;
                  _results = [];
                  for (i in lines) {
                    _results.push(i);
                  }
                  return _results;
                })()).sort(function(a, b) {
                  return a - b;
                });
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  lineNo = _ref[_i];
                  currentPos = 0;
                  _ref1 = lines[lineNo];
                  _fn = function(r) {
                    if (r.$el != null) {
                      if (r.positioned) {
                        currentPos = r.charLead;
                        afterLayout.push(r.afterLayout);
                      }
                      $(currentLineEl).append(r.$el);
                      r.$el.attr('data-pos', currentPos);
                      r.$el.attr('data-line', lineNo);
                      return currentPos += r.charWidth || 0;
                    }
                  };
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    r = _ref1[_j];
                    _fn(r);
                  }
                  currentLineEl = $("<div></div>");
                  $(container).append(currentLineEl);
                }
                runAfterLayout = function(i) {
                  if (i < afterLayout.length) {
                    afterLayout[i]();
                    return setTimeout((function() {
                      return runAfterLayout(i + 1);
                    }), 0);
                  }
                };
                setTimeout(function() {
                  return runAfterLayout(0);
                }, 0);
                adjustHeight();
                return null;
              };
              renderingTimer = null;
              that.eventModelChange = function() {
                if (renderingTimer != null) {
                  clearTimeout(renderingTimer);
                }
                return renderingTimer = setTimeout(that.selfRender, 0);
              };
              annoLens = function(container, view, model, id) {
                var content, el, item, rendering;
                rendering = {};
                el = $("<span></span>");
                rendering.$el = el;
                item = model.getItem(id);
                el.text(item.text[0]);
                el.addClass(item.type.join(" "));
                if ((item.css != null) && !/^\s*$/.test(item.css)) {
                  el.attr("style", item.css[0]);
                }
                content = item.text[0].replace(/\s+/g, " ");
                if (content === " ") {
                  rendering.charWidth = 0;
                } else {
                  rendering.charWidth = content.length;
                }
                if (rendering.charWidth === 0) {
                  return null;
                }
                if (lines[currentLine] == null) {
                  lines[currentLine] = [];
                }
                lines[currentLine].push(rendering);
                rendering.line = currentLine;
                rendering.positioned = false;
                rendering.afterLayout = function() {};
                rendering.remove = function() {
                  var r;
                  el.remove();
                  lines[rendering.line] = (function() {
                    var _i, _len, _ref, _results;
                    _ref = lines[rendering.line];
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      r = _ref[_i];
                      if (r !== rendering) {
                        _results.push(r);
                      }
                    }
                    return _results;
                  })();
                  return adjustHeight();
                };
                rendering.update = function(item) {
                  el.text(item.text[0]);
                  return adjustHeight();
                };
                return rendering;
              };
              additionLens = function(container, view, model, id) {
                var content, el, item, lastRendering, ourLineNo, rendering, _ref, _ref1, _ref2;
                rendering = {};
                el = $("<span></span>");
                rendering.$el = el;
                item = model.getItem(id);
                el.text(item.text[0]);
                el.addClass(item.type.join(" "));
                if ((item.css != null) && /vertical-align: sub;/.test(item.css[0])) {
                  ourLineNo = currentLine + 0.3;
                } else if ((item.css != null) && /vertical-align: super;/.test(item.css[0])) {
                  ourLineNo = currentLine - 0.3;
                } else {
                  ourLineNo = currentLine;
                }
                if (lines[ourLineNo] == null) {
                  lines[ourLineNo] = [];
                }
                lines[ourLineNo].push(rendering);
                lastRendering = (_ref = lines[currentLine]) != null ? _ref[((_ref1 = lines[currentLine]) != null ? _ref1.length : void 0) - 1] : void 0;
                rendering.positioned = currentLine !== ourLineNo && ((_ref2 = lines[currentLine]) != null ? _ref2.length : void 0) > 0;
                content = item.text[0].replace(/\s+/g, " ");
                if (content === " ") {
                  rendering.charWidth = 0;
                } else {
                  rendering.charWidth = content.length;
                }
                rendering.line = ourLineNo;
                rendering.afterLayout = function() {
                  var middle, myMiddle, myOffset, neededSpace, prevOffset, prevSibling, spacing;
                  if (lastRendering != null) {
                    myOffset = rendering.$el.offset();
                    middle = lastRendering.$el.offset().left + lastRendering.$el.outerWidth() / 2;
                    myMiddle = myOffset.left + rendering.$el.outerWidth() / 2;
                    neededSpace = middle - myMiddle;
                    prevSibling = rendering.$el.prev();
                    if ((prevSibling != null) && prevSibling.size() > 0) {
                      prevOffset = prevSibling.offset();
                      spacing = (prevOffset.left + prevSibling.outerWidth()) - myOffset.left;
                      if (spacing > neededSpace) {
                        neededSpace = spacing;
                      }
                    }
                    if (neededSpace >= 0) {
                      return rendering.$el.css({
                        'position': 'relative',
                        'left': neededSpace + "px"
                      });
                    }
                  }
                };
                rendering.remove = function() {
                  var r;
                  el.remove();
                  lines[rendering.line] = (function() {
                    var _i, _len, _ref3, _results;
                    _ref3 = lines[rendering.line];
                    _results = [];
                    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                      r = _ref3[_i];
                      if (r !== rendering) {
                        _results.push(r);
                      }
                    }
                    return _results;
                  })();
                  return adjustHeight();
                };
                rendering.update = function(item) {
                  el.text(item.text[0]);
                  return adjustHeight();
                };
                return rendering;
              };
              lenses = {};
              that.addLens = function(key, lens) {
                return lenses[key] = lens;
              };
              that.getLens = function(id) {
                var item, t, types, _i, _j, _len, _len1, _ref;
                item = that.dataView.getItem(id);
                types = [];
                _ref = item.type;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  t = _ref[_i];
                  if ($.isArray(t)) {
                    types = types.concat(t);
                  } else {
                    types.push(t);
                  }
                }
                if (__indexOf.call(types, 'AdditionAnnotation') >= 0) {
                  return {
                    render: lenses['AdditionAnnotation']
                  };
                }
                for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
                  t = types[_j];
                  if (t !== 'LineAnnotation' && (lenses[t] != null)) {
                    return {
                      render: lenses[t]
                    };
                  }
                }
                return {
                  render: lenses['LineAnnotation']
                };
              };
              that.hasLens = function(k) {
                return lenses[k] != null;
              };
              that.addLens('AdditionAnnotation', additionLens);
              that.addLens('DeletionAnnotation', annoLens);
              that.addLens('SearchAnnotation', annoLens);
              that.addLens('LineAnnotation', annoLens);
              that.addLens('Text', function() {});
              return that.addLens('LineBreak', function(container, view, model, id) {
                return currentLine += 1;
              });
            }]));
          };
        });
        Presentation.namespace("Zone", function(Zone) {
          return Zone.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Zone"].concat(__slice.call(args), [function(that, container) {
              var annoExpr, app, options, recalculateHeight, recalculateHeightTimer, svgRoot;
              options = that.options;
              svgRoot = options.svgRoot;
              app = that.options.application();
              that.setHeight(options.height);
              that.setWidth(options.width);
              that.setX(options.x);
              that.setY(options.y);
              recalculateHeightTimer = null;
              recalculateHeight = function(h) {
                var heightSettingTimer;
                if (recalculateHeightTimer != null) {
                  clearTimeout(recalculateHeightTimer);
                }
                return heightSettingTimer = setTimeout(function() {
                  var length;
                  length = h || 0;
                  that.visitRenderings(function(id) {
                    var r;
                    r = that.renderingFor(id);
                    if (r.getHeight != null) {
                      h = r.getHeight() || 0;
                    }
                    if (r.getY != null) {
                      h += r.getY() || 0;
                    }
                    if (h > length) {
                      length = h;
                    }
                    return true;
                  });
                  return that.setHeight(length + 15);
                }, 0);
              };
              annoExpr = that.dataView.prepare(['!target']);
              that.addLens('Image', function(container, view, model, id) {
                var height, item, renderImage, rendering, svg, svgImage, vb, y;
                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                svg = $(svgRoot.root());
                vb = svg.get(0).getAttribute("viewBox");
                if (vb == null) {
                  svgRoot.configure({
                    viewBox: "0 0 " + options.width + " " + options.height
                  });
                }
                svgImage = null;
                height = 0;
                y = 0;
                renderImage = function(item) {
                  var width, x, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
                  if ((((_ref = item.image) != null ? _ref[0] : void 0) != null) && (svgRoot != null)) {
                    x = ((_ref1 = item.x) != null ? _ref1[0] : void 0) != null ? item.x[0] : 0;
                    y = ((_ref2 = item.y) != null ? _ref2[0] : void 0) != null ? item.y[0] : 0;
                    width = ((_ref3 = item.width) != null ? _ref3[0] : void 0) != null ? item.width[0] : options.width - x;
                    height = ((_ref4 = item.height) != null ? _ref4[0] : void 0) != null ? item.height[0] : options.height - y;
                    if (svgImage != null) {
                      svgRoot.remove(svgImage);
                    }
                    return svgImage = svgRoot.image(container, x / 10, y / 10, width / 10, height / 10, (_ref5 = item.image) != null ? _ref5[0] : void 0, {
                      preserveAspectRatio: 'none'
                    });
                  }
                };
                renderImage(item);
                rendering.getHeight = function() {
                  return height / 10;
                };
                rendering.getY = function() {
                  return y / 10;
                };
                rendering.update = renderImage;
                rendering.remove = function() {
                  if ((svgImage != null) && (svgRoot != null)) {
                    return svgRoot.remove(svgImage);
                  }
                };
                return rendering;
              });
              that.addLens('ImageViewer', function(container, view, model, id) {
                var baseURL, canvas, djatokaURL, g, imageURL, item, map, po, rendering, svg, toAdoratio;
                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                app.imageControls.setActive(true);
                djatokaURL = "http://sga.mith.org:8080/adore-djatoka/resolver";
                imageURL = item.image[0];
                baseURL = djatokaURL + "?url_ver=Z39.88-2004&rft_id=" + imageURL;
                po = org.polymaps;
                svg = $(svgRoot.root());
                svg.get(0).removeAttribute("viewBox");
                g = svgRoot.group();
                map = po.map().container(g);
                canvas = $(container).parent().get(0);
                toAdoratio = $.ajax({
                  datatype: "json",
                  url: baseURL + '&svc_id=info:lanl-repo/svc/getMetadata',
                  success: adoratio(canvas, baseURL, map)
                });
                toAdoratio.then(function() {
                  var fromZoomControls, startCenter;
                  fromZoomControls = false;
                  startCenter = map.center();
                  app.imageControls.events.onZoomChange.addListener(function(z) {
                    map.zoom(z);
                    app.imageControls.setImgPosition(map.position);
                    return fromZoomControls = true;
                  });
                  app.imageControls.events.onImgPositionChange.addListener(function(p) {
                    if (p.topLeft.x === 0 && p.topLeft.y === 0) {
                      return map.center(startCenter);
                    }
                  });
                  app.imageControls.setZoom(map.zoom());
                  app.imageControls.setMaxZoom(map.zoomRange()[1]);
                  app.imageControls.setMinZoom(map.zoomRange()[0]);
                  app.imageControls.setImgPosition(map.position);
                  map.on('zoom', function() {
                    if (!fromZoomControls) {
                      app.imageControls.setZoom(map.zoom());
                      app.imageControls.setImgPosition(map.position);
                      app.imageControls.setMaxZoom(map.zoomRange()[1]);
                    }
                    return fromZoomControls = false;
                  });
                  return map.on('drag', function() {
                    return app.imageControls.setImgPosition(map.position);
                  });
                });
                rendering.getHeight = function() {
                  return options.height / 10;
                };
                rendering.getY = function() {
                  return options.y / 10;
                };
                rendering.update = function(item) {
                  return 0;
                };
                rendering.remove = function() {
                  app.imageControls.setActive(false);
                  app.imageControls.setZoom(0);
                  app.imageControls.setMaxZoom(0);
                  app.imageControls.setMinZoom(0);
                  app.imageControls.setImgPosition({
                    topLeft: {
                      x: 0,
                      y: 0
                    },
                    bottomRight: {
                      x: 0,
                      y: 0
                    }
                  });
                  return $(svgRoot.root()).find('#map').remove();
                };
                return rendering;
              });
              that.addLens('ZoneAnnotation', function(container, view, model, id) {
                var height, rendering, width, x, y, zone, zoneContainer, zoneDataView, zoneInfo, _ref, _ref1, _ref2, _ref3;
                rendering = {};
                zoneInfo = model.getItem(id);
                zoneContainer = null;
                zoneContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                container.appendChild(zoneContainer);
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                zoneDataView = MITHgrid.Data.SubSet.initInstance({
                  dataStore: model,
                  expressions: ['!target']
                });
                zone = Zone.initInstance(zoneContainer, {
                  types: options.types,
                  dataView: zoneDataView,
                  svgRoot: svgRoot,
                  application: options.application,
                  heigth: height,
                  width: width
                });
                zoneDataView.setKey(id);
                zone.events.onHeightChange.addListener(function(h) {
                  return $(zoneContainer).attr('height', h / 10);
                });
                zone.events.onWidthChange.addListener(function(w) {
                  return $(zoneContainer).attr('width', w / 10);
                });
                zone.events.onXChange.addListener(function(x) {
                  return $(zoneContainer).attr('x', x / 10);
                });
                zone.events.onYChange.addListener(function(y) {
                  return $(zoneContainer).attr('y', y / 10);
                });
                zone.setX(x);
                zone.setY(y);
                zone.setHeight(height);
                zone.setWidth(width);
                zone.events.onHeightChange.addListener(recalculateHeight);
                rendering.getHeight = zone.getHeight;
                rendering.getY = zone.getY;
                rendering._destroy = function() {
                  if (zone._destroy != null) {
                    zone._destroy();
                  }
                  if (zoneDataView._destroy != null) {
                    return zoneDataView._destroy();
                  }
                };
                rendering.remove = function() {
                  zone.setHeight(0);
                  $(zoneContainer).hide();
                  return rendering._destroy();
                };
                rendering.update = function(item) {
                  var _ref4, _ref5, _ref6, _ref7;
                  x = ((_ref4 = item.x) != null ? _ref4[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref5 = item.y) != null ? _ref5[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref6 = item.width) != null ? _ref6[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref7 = item.height) != null ? _ref7[0] : void 0) != null ? item.height[0] : options.height - y;
                  if (height < zone.getHeight()) {
                    height = zone.getHeight();
                  }
                  that.setX(x);
                  that.setY(y);
                  that.setWidth(width);
                  return that.setHeight(height);
                };
                return rendering;
              });
              that.addLens('ContentAnnotation', function(container, view, model, id) {
                var bodyEl, height, item, overflowDiv, rendering, rootEl, textContainer, width, x, y, _ref, _ref1, _ref2, _ref3;
                if (__indexOf.call(options.types || [], 'Text') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                textContainer = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                $(textContainer).attr("x", x / 10).attr("y", y / 10).attr("width", width / 10).attr("height", height / 10);
                container.appendChild(textContainer);
                bodyEl = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');
                overflowDiv = document.createElement('div');
                bodyEl.appendChild(overflowDiv);
                rootEl = document.createElement('div');
                $(rootEl).addClass("text-content");
                overflowDiv.appendChild(rootEl);
                rootEl.text(item.text[0]);
                rendering.getHeight = function() {
                  return $(textContainer).height() * 10;
                };
                rendering.getY = function() {
                  return $(textContainer).position().top * 10;
                };
                rendering.update = function(item) {
                  return rootEl.text(item.text[0]);
                };
                rendering.remove = function() {
                  return rootEl.remove();
                };
                return rendering;
              });
              return that.addLens('TextContentZone', function(container, view, model, id) {
                var bodyEl, height, item, marquee, overflowDiv, rendering, rootEl, scale, strokeW, svg, text, textContainer, textDataView, updateMarque, visiblePerc, width, x, y, zoom, _ref, _ref1, _ref2, _ref3;
                if (__indexOf.call(options.types || [], 'Text') < 0) {
                  return;
                }
                svg = $(svgRoot.root());
                rendering = {};
                app = options.application();
                zoom = app.imageControls.getZoom();
                item = model.getItem(id);
                textContainer = null;
                textContainer = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
                textContainer.style.overflow = 'hidden';
                container.appendChild(textContainer);
                bodyEl = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');
                overflowDiv = document.createElement('div');
                bodyEl.appendChild(overflowDiv);
                rootEl = document.createElement('div');
                $(rootEl).addClass("text-content");
                $(rootEl).attr("id", id);
                $(rootEl).css("font-size", 15.0);
                $(rootEl).css("line-height", 1.15);
                overflowDiv.appendChild(rootEl);
                textContainer.appendChild(bodyEl);
                textDataView = MITHgrid.Data.SubSet.initInstance({
                  dataStore: model,
                  expressions: ['!target']
                });
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                $(textContainer).attr("x", x / 10).attr("y", y / 10).attr("width", width / 10).attr("height", height / 10);
                text = Presentation.TextContent.initInstance(rootEl, {
                  types: options.types,
                  dataView: textDataView,
                  svgRoot: svgRoot,
                  application: options.application,
                  height: height,
                  width: width,
                  x: x,
                  y: y
                });
                textDataView.setKey(id);
                updateMarque = function(z) {};
                if (app.imageControls.getActive()) {
                  $('.marquee').remove();
                  strokeW = 1;
                  marquee = svgRoot.rect(0, 0, Math.max(1, that.getWidth() / 10), Math.max(1, that.getHeight() / 10), {
                    "class": 'marquee',
                    fill: 'yellow',
                    stroke: 'navy',
                    strokeWidth: strokeW,
                    fillOpacity: '0.05',
                    strokeOpacity: '0.9'
                  });
                  scale = that.getWidth() / 10 / $(container).width();
                  visiblePerc = 100;
                  updateMarque = function(z) {
                    if (app.imageControls.getMaxZoom() > 0) {
                      width = Math.round(that.getWidth() / Math.pow(2, app.imageControls.getMaxZoom() - z));
                      visiblePerc = Math.min(100, ($(container).width() * 100) / width);
                      marquee.setAttribute("width", (that.getWidth() / 10 * visiblePerc) / 100);
                      marquee.setAttribute("height", (that.getHeight() / 10 * visiblePerc) / 100);
                      if (app.imageControls.getZoom() > app.imageControls.getMaxZoom() - 1) {
                        return $(marquee).attr("opacity", "0");
                      } else {
                        return $(marquee).attr("opacity", "100");
                      }
                    }
                  };
                  that.onDestroy(app.imageControls.events.onZoomChange.addListener(updateMarque));
                  that.onDestroy(app.imageControls.events.onImgPositionChange.addListener(function(p) {
                    marquee.setAttribute("x", ((-p.topLeft.x * visiblePerc) / 100) * scale);
                    return marquee.setAttribute("y", ((-p.topLeft.y * visiblePerc) / 100) * scale);
                  }));
                }
                that.onDestroy(text.events.onHeightChange.addListener(function(h) {
                  $(textContainer).attr("height", h / 10);
                  $(overflowDiv).attr("height", h / 10);
                  recalculateHeight();
                  return setTimeout((function() {
                    return updateMarque(app.imageControls.getZoom());
                  }), 0);
                }));
                rendering.getHeight = text.getHeight;
                rendering.getY = text.getY;
                rendering._destroy = function() {
                  if (text._destroy != null) {
                    text._destroy();
                  }
                  if (textDataView._destroy != null) {
                    return textDataView._destroy();
                  }
                };
                rendering.remove = function() {
                  $(textContainer).empty();
                  return svgRoot.remove(textContainer);
                };
                rendering.update = function(item) {
                  var _ref4, _ref5, _ref6, _ref7;
                  x = ((_ref4 = item.x) != null ? _ref4[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref5 = item.y) != null ? _ref5[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref6 = item.width) != null ? _ref6[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref7 = item.height) != null ? _ref7[0] : void 0) != null ? item.height[0] : options.height - y;
                  if (height > that.getHeight()) {
                    that.setHeight(height);
                  } else {
                    height = that.getHeight();
                  }
                  return $(textContainer).attr("x", x / 10).attr("y", y / 10).attr("width", width / 10);
                };
                return rendering;
              });
            }]));
          };
        });
        return Presentation.namespace("Canvas", function(Canvas) {
          return Canvas.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Canvas"].concat(__slice.call(args), [function(that, container) {
              var SVG, SVGHeight, SVGWidth, annoExpr, canvasHeight, canvasWidth, dataView, options, pendingSVGfctns, realCanvas, setSizeAttrs, svgRoot, svgRootEl;
              options = that.options;
              annoExpr = that.dataView.prepare(['!target']);
              pendingSVGfctns = [];
              SVG = function(cb) {
                return pendingSVGfctns.push(cb);
              };
              svgRootEl = $("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n >\n</svg>");
              container.append(svgRootEl);
              svgRoot = $(svgRootEl).svg({
                onLoad: function(svg) {
                  var cb, _i, _len;
                  SVG = function(cb) {
                    return cb(svg);
                  };
                  for (_i = 0, _len = pendingSVGfctns.length; _i < _len; _i++) {
                    cb = pendingSVGfctns[_i];
                    cb(svg);
                  }
                  return pendingSVGfctns = null;
                }
              });
              canvasWidth = null;
              canvasHeight = null;
              SVGHeight = null;
              SVGWidth = parseInt($(container).width() * 20 / 20, 10);
              setSizeAttrs = function() {
                return SVG(function(svgRoot) {
                  var svg, vb;
                  svg = $(svgRoot.root());
                  vb = svg.get(0).getAttribute("viewBox");
                  if (vb != null) {
                    svgRoot.configure({
                      viewBox: "0 0 " + (canvasWidth / 10) + " " + (canvasHeight / 10)
                    });
                  }
                  return svgRootEl.css({
                    width: SVGWidth,
                    height: SVGHeight,
                    border: "1px solid #eeeeee",
                    "border-radius": "2px",
                    "background-color": "#ffffff"
                  });
                });
              };
              that.events.onHeightChange.addListener(function(h) {
                SVGHeight = parseInt(SVGWidth / canvasWidth * canvasHeight, 10);
                if (__indexOf.call(options.types, "Text") >= 0 && h / 10 > SVGHeight) {
                  SVGHeight = h / 10;
                }
                return setSizeAttrs();
              });
              MITHgrid.events.onWindowResize.addListener(function() {
                SVGWidth = parseInt($(container).width() * 20 / 20, 10);
                if ((canvasWidth != null) && canvasWidth > 0) {
                  return that.setScale(SVGWidth / canvasWidth);
                }
              });
              that.events.onScaleChange.addListener(function(s) {
                if ((canvasWidth != null) && (canvasHeight != null)) {
                  SVGHeight = parseInt(canvasHeight * s, 10);
                  return setSizeAttrs();
                }
              });
              dataView = MITHgrid.Data.SubSet.initInstance({
                dataStore: options.dataView,
                expressions: ['!target'],
                key: null
              });
              realCanvas = null;
              $(container).on("resetPres", function() {
                SVGWidth = parseInt($(container).width() * 20 / 20, 10);
                if ((canvasWidth != null) && canvasWidth > 0) {
                  that.setScale(SVGWidth / canvasWidth);
                  if (realCanvas != null) {
                    if (realCanvas.hide != null) {
                      realCanvas.hide();
                    }
                    if (realCanvas._destroy != null) {
                      realCanvas._destroy();
                    }
                  }
                  return SVG(function(svgRoot) {
                    svgRoot.clear();
                    return realCanvas = SGA.Reader.Presentation.Zone.initInstance(svgRoot.root(), {
                      types: options.types,
                      dataView: dataView,
                      application: options.application,
                      height: canvasHeight,
                      width: canvasWidth,
                      svgRoot: svgRoot
                    });
                  });
                }
              });
              return that.events.onCanvasChange.addListener(function(canvas) {
                var item, _ref, _ref1;
                dataView.setKey(canvas);
                item = dataView.getItem(canvas);
                canvasWidth = ((_ref = item.width) != null ? _ref[0] : void 0) || 1;
                canvasHeight = ((_ref1 = item.height) != null ? _ref1[0] : void 0) || 1;
                that.setScale(SVGWidth / canvasWidth);
                if (realCanvas != null) {
                  if (realCanvas.hide != null) {
                    realCanvas.hide();
                  }
                  if (realCanvas._destroy != null) {
                    realCanvas._destroy();
                  }
                }
                return SVG(function(svgRoot) {
                  $(container).trigger("sizeChange", [
                    {
                      w: container.width(),
                      h: container.height()
                    }
                  ]);
                  svgRoot.clear();
                  realCanvas = SGA.Reader.Presentation.Zone.initInstance(svgRoot.root(), {
                    types: options.types,
                    dataView: dataView,
                    application: options.application,
                    height: canvasHeight,
                    width: canvasWidth,
                    svgRoot: svgRoot
                  });
                  that.setHeight(canvasHeight);
                  return realCanvas.events.onHeightChange.addListener(that.setHeight);
                });
              });
            }]));
          };
        });
      });
      SGAReader.namespace("Data", function(Data) {
        Data.namespace("StyleStore", function(StyleStore) {
          return StyleStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var docs, options, regex;
              options = that.options;
              docs = {};
              regex = new RegExp("(?:\\.(\\S+)\\s*\\{\\s*([^}]*)\\s*\\})", "mg");
              that.addStyles = function(id, css) {
                var results, _results;
                if (docs[id] != null) {
                  return;
                }
                docs[id] = {};
                results = regex.exec(css);
                _results = [];
                while ((results != null ? results.index : void 0) != null) {
                  docs[id][results[1]] = results[2];
                  _results.push(results = regex.exec(css));
                }
                return _results;
              };
              return that.getStylesForClass = function(id, klass) {
                var _ref;
                if (((_ref = docs[id]) != null ? _ref[klass] : void 0) != null) {
                  return docs[id][klass];
                } else {
                  return "";
                }
              };
            }]));
          };
        });
        Data.namespace("TextStore", function(TextStore) {
          return TextStore.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, __slice.call(args).concat([function(that) {
              var fileContents, loadingFiles, options, pendingFiles;
              options = that.options;
              fileContents = {};
              loadingFiles = {};
              pendingFiles = {};
              that.addFile = function(files) {
                var file, _i, _len, _results;
                if (!$.isArray(files)) {
                  files = [files];
                }
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    if ((file != null) && (fileContents[file] == null) && (loadingFiles[file] == null)) {
                      loadingFiles[file] = [];
                      return $.ajax({
                        url: file,
                        type: 'GET',
                        processData: false,
                        success: function(data) {
                          var c, f, _j, _len1, _ref;
                          c = data.documentElement.textContent;
                          fileContents[file] = c;
                          _ref = loadingFiles[file];
                          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            f = _ref[_j];
                            f(c);
                          }
                          return delete loadingFiles[file];
                        }
                      });
                    }
                  })(file));
                }
                return _results;
              };
              return that.withFile = function(file, cb) {
                if (fileContents[file] != null) {
                  return cb(fileContents[file]);
                } else if (loadingFiles[file] != null) {
                  return loadingFiles[file].push(cb);
                } else {
                  that.addFile(file);
                  return loadingFiles[file].push(cb);
                }
              };
            }]));
          };
        });
        return Data.namespace("Manifest", function(Manifest) {
          var NS, types;
          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt",
            "http://purl.org/dc/dcmitype/": "dctypes"
          };
          types = {
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "item",
            "http://www.w3.org/ns/openannotation/core/hasMotivation": "item"
          };
          return Manifest.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, flushSearchResults, getSearchResultCanvases, importFromURL, importer, itemsForCanvas, itemsWithType, loadedUrls, options;
              options = that.options;
              data = MITHgrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              importer = MITHgrid.Data.Importer.RDF_JSON.initInstance(data, NS, types);
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                that.addItemsToProcess(1);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    that.addItemsProcessed(1);
                    return that.importJSON(data, cb);
                  },
                  error: function(e) {
                    that.addItemsProcessed(1);
                    throw new Error("Could not load the manifest");
                  }
                });
              };
              that.importJSON = function(json, cb) {
                var syncer;
                syncer = MITHgrid.initSynchronizer(cb);
                syncer.increment();
                importer["import"](json, function(ids) {
                  var idset, urls;
                  idset = MITHgrid.Data.Set.initInstance(ids);
                  urls = data.getObjectsUnion(idset, 'oreisDescribedBy');
                  urls.visit(function(url) {
                    syncer.increment();
                    return importFromURL(url, syncer.decrement);
                  });
                  return syncer.decrement();
                });
                return syncer.done();
              };
              itemsWithType = function(type) {
                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHgrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              itemsForCanvas = function(canvas) {
                var annos, canvasSet, contentAnnotations, imageAnnotations, specificResources, specificResourcesAnnos, tei, teiURL;
                if (!$.isArray(canvas)) {
                  canvas = [canvas];
                }
                canvasSet = MITHgrid.Data.Set.initInstance(canvas);
                specificResources = data.getSubjectsUnion(canvasSet, "oahasSource");
                imageAnnotations = data.getSubjectsUnion(canvasSet, "oahasTarget");
                contentAnnotations = data.getSubjectsUnion(specificResources, "oahasTarget");
                tei = data.getObjectsUnion(contentAnnotations, 'oahasBody');
                teiURL = data.getObjectsUnion(tei, 'oahasSource');
                specificResourcesAnnos = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(specificResourcesAnnos, 'oahasTarget').items();
                return annos.concat(imageAnnotations.items(), contentAnnotations.items());
              };
              flushSearchResults = function() {
                var searchResults;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type").items();
                return data.removeItems(searchResults);
              };
              getSearchResultCanvases = function() {
                var annos, canvasKeys, searchResults, sources, specificResources, step, teiURL;
                types = MITHgrid.Data.Set.initInstance(['sgaSearchAnnotation']);
                searchResults = data.getSubjectsUnion(types, "type");
                specificResources = data.getObjectsUnion(searchResults, "oahasTarget");
                teiURL = data.getObjectsUnion(specificResources, 'oahasSource');
                sources = data.getSubjectsUnion(teiURL, 'oahasSource');
                annos = data.getSubjectsUnion(sources, 'oahasBody');
                step = data.getObjectsUnion(annos, 'oahasTarget');
                canvasKeys = data.getObjectsUnion(step, 'oahasSource');
                return $.unique(canvasKeys.items());
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getRanges = function() {
                return itemsWithType('scRange');
              };
              that.getAnnotationsForCanvas = itemsForCanvas;
              that.flushSearchResults = flushSearchResults;
              that.getSearchResultCanvases = getSearchResultCanvases;
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAReader.namespace("Component", function(Component) {
        Component.namespace("ProgressBar", function(ProgressBar) {
          return ProgressBar.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ProgressBar"].concat(__slice.call(args), [function(that, container) {
              that.events.onNumeratorChange.addListener(function(n) {
                var percent;
                percent = parseInt(100 * n / that.getDenominator(), 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.events.onDenominatorChange.addListener(function(d) {
                var percent;
                percent = parseInt(100 * that.getNumerator() / d, 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.show = function() {
                return $(container).show();
              };
              return that.hide = function() {
                return $(container).hide();
              };
            }]));
          };
        });
        Component.namespace("Spinner", function(Spinner) {
          return Spinner.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.Spinner"].concat(__slice.call(args), [function(that, container) {
              that.show = function() {
                return $(container).show();
              };
              return that.hide = function() {
                return $(container).hide();
              };
            }]));
          };
        });
        Component.namespace("SequenceSelector", function(SequenceSelector) {
          return SequenceSelector.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Component.SequenceSelector"].concat(__slice.call(args), [function(that, container) {
              var options;
              options = that.options;
              return that.addLens('Sequence', function(container, view, model, id) {
                var el, item, rendering, _ref;
                that.setSequence(id);
                if ($(container).is("select")) {
                  rendering = {};
                  item = model.getItem(id);
                  el = $("<option></option>");
                  el.attr({
                    value: id
                  });
                  el.text((_ref = item.label) != null ? _ref[0] : void 0);
                  $(container).append(el);
                  $(container).change(function() {
                    return that.setSequence($(container).val());
                  });
                  that.events.onSequenceChange.addListener(function(v) {
                    return $(container).val(v);
                  });
                  return that.finishDisplayUpdate = function() {
                    return that.setSequence($(container).val());
                  };
                }
              });
            }]));
          };
        });
        Component.namespace("Slider", function(Slider) {
          return Slider.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.Slider"].concat(__slice.call(args), [function(that, container) {
              $('.canvas').on("searchResultsChange", function(e, results) {
                var $c, adjustment, pages, r, res_h_perc, res_height, s_max, s_min, valPercent, _i, _len, _results;
                $c = $(container);
                $('.res').remove();
                pages = that.getMax();
                _results = [];
                for (_i = 0, _len = results.length; _i < _len; _i++) {
                  r = results[_i];
                  r = r + 1;
                  res_height = $c.height() / (pages + 1);
                  res_h_perc = (pages + 1) / 100;
                  s_min = $c.slider("option", "min");
                  s_max = $c.slider("option", "max");
                  valPercent = 100 - ((r - s_min) / (s_max - s_min) * 100);
                  adjustment = res_h_perc / 2;
                  _results.push($c.append("<div style='bottom:" + (valPercent + adjustment) + "%; height:" + res_height + "px' class='res ui-slider-range ui-widget-header ui-corner-all'> </div>"));
                }
                return _results;
              });
              that.events.onMaxChange.addListener(function(n) {
                var pages;
                if ($(container).data("slider")) {
                  $(container).slider({
                    max: n
                  });
                } else {
                  pages = n;
                  $(container).slider({
                    orientation: "vertical",
                    range: "min",
                    min: that.getMin(),
                    max: pages,
                    value: pages,
                    step: 1,
                    slide: function(event, ui) {
                      return 0;
                    },
                    stop: function(event, ui) {
                      0;
                      return that.setValue(pages - ui.value);
                    }
                  });
                  $('.canvas').on("sizeChange", function(e, d) {
                    var $c;
                    $c = $(container);
                    $c.height(d.h);
                    return $('.canvas').unbind("sizeChange");
                  });
                }
                if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                  $.bbq.pushState({
                    n: that.getValue() + 1
                  });
                  return $(container).slider({
                    value: pages - that.getValue()
                  });
                }
              });
              that.events.onMinChange.addListener(function(n) {
                if ($(container).data("slider")) {
                  return $(container).slider({
                    min: n
                  });
                }
              });
              return that.events.onValueChange.addListener(function(n) {
                if ($(container).data("slider")) {
                  $(container).slider({
                    value: that.getMax() - n
                  });
                }
                if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                  return $.bbq.pushState({
                    n: that.getValue() + 1
                  });
                }
              });
            }]));
          };
        });
        Component.namespace("PagerControls", function(PagerControls) {
          return PagerControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.PagerControls"].concat(__slice.call(args), [function(that, container) {
              var firstEl, lastEl, nextEl, prevEl, updateBBQ;
              $(window).bind("hashchange", function(e) {
                var n;
                n = $.bbq.getState("n");
                if ((n != null) && parseInt(n) !== NaN) {
                  return that.setValue(n - 1);
                }
              });
              firstEl = $(container).find("#first-page");
              prevEl = $(container).find("#prev-page");
              nextEl = $(container).find("#next-page");
              lastEl = $(container).find("#last-page");
              that.events.onMinChange.addListener(function(n) {
                if (n < that.getValue()) {
                  firstEl.removeClass("disabled");
                  return prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  return prevEl.addClass("disabled");
                }
              });
              that.events.onMaxChange.addListener(function(n) {
                if (n > that.getValue()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disabled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              that.events.onValueChange.addListener(function(n) {
                if (n > that.getMin()) {
                  firstEl.removeClass("disabled");
                  prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  prevEl.addClass("disabled");
                }
                if (n < that.getMax()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disabled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              updateBBQ = function() {
                if ((that.getValue() != null) && parseInt(that.getValue()) !== NaN) {
                  return $.bbq.pushState({
                    n: that.getValue() + 1
                  });
                }
              };
              $(prevEl).click(function(e) {
                e.preventDefault();
                that.addValue(-1);
                return updateBBQ();
              });
              $(nextEl).click(function(e) {
                e.preventDefault();
                that.addValue(1);
                return updateBBQ();
              });
              $(firstEl).click(function(e) {
                e.preventDefault();
                that.setValue(that.getMin());
                return updateBBQ();
              });
              return $(lastEl).click(function(e) {
                e.preventDefault();
                that.setValue(that.getMax());
                return updateBBQ();
              });
            }]));
          };
        });
        Component.namespace("ImageControls", function(ImageControls) {
          return ImageControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ImageControls"].concat(__slice.call(args), [function(that, container) {
              var inEl, marqueeEl, outEl, resetEl;
              resetEl = $(container).find("#zoom-reset");
              inEl = $(container).find("#zoom-in");
              outEl = $(container).find("#zoom-out");
              marqueeEl = $(container).find("#marquee-sh");
              $(resetEl).click(function(e) {
                e.preventDefault();
                that.setZoom(that.getMinZoom());
                return that.setImgPosition({
                  topLeft: {
                    x: 0,
                    y: 0
                  },
                  bottomRight: {
                    x: 0,
                    y: 0
                  }
                });
              });
              $(inEl).click(function(e) {
                var zoom;
                e.preventDefault();
                zoom = that.getZoom();
                if (Math.floor(zoom + 1 <= that.getMaxZoom())) {
                  return that.setZoom(Math.floor(zoom + 1));
                }
              });
              $(outEl).click(function(e) {
                var minZoom, zoom;
                e.preventDefault();
                zoom = that.getZoom();
                minZoom = that.getMinZoom();
                if (Math.floor(zoom - 1 > minZoom)) {
                  return that.setZoom(Math.floor(zoom - 1));
                } else if (Math.floor(zoom - 1 === Math.floor(minZoom))) {
                  return that.setZoom(minZoom);
                }
              });
              return $(marqueeEl).click(function(e) {
                var marquees;
                e.preventDefault();
                marquees = $('.marquee');
                return marquees.each(function(i, m) {
                  m = $(m);
                  if (m.css("display") !== "none") {
                    return m.hide();
                  } else {
                    return m.show();
                  }
                });
              });
            }]));
          };
        });
        Component.namespace("SearchBox", function(SearchBox) {
          return SearchBox.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.SearchBox"].concat(__slice.call(args), [function(that, service) {
              var container, srcButton, srcForm;
              that.events.onQueryChange.addListener(function(q) {
                q = q.replace(/\=/g, ':');
                q = q.replace(/\&/g, '|');
                return $.bbq.pushState({
                  s: q
                });
              });
              container = args[0];
              that.setServiceURL(service);
              srcButton = $('#search-btn');
              srcForm = $(container).closest('form');
              if (srcButton != null) {
                srcButton.click(function() {
                  return srcForm.submit();
                });
              }
              return srcForm.submit(function(e) {
                var f, fields, fields_html, i, val, _i, _len;
                e.preventDefault();
                fields_html = $('#limit-search').find('input:checked');
                fields = "";
                if (fields_html.length === 0) {
                  fields = "text";
                } else {
                  for (i = _i = 0, _len = fields_html.length; _i < _len; i = ++_i) {
                    f = fields_html[i];
                    fields += $(f).val();
                    if (i + 1 !== fields_html.length) {
                      fields += ',';
                    }
                  }
                }
                val = $(container).find('input').val();
                if (!val.match('^\s*$')) {
                  that.setQuery("f=" + fields + "&q=" + val);
                }
                return false;
              });
            }]));
          };
        });
        Component.namespace("ModeControls", function(ModeControls) {
          return ModeControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.ModeControls"].concat(__slice.call(args), [function(that, container) {
              var imgOnly, std, stored_txt_canvas, text, xml;
              imgOnly = $(container).find("#img-only");
              text = $(container).find("#mode-rdg");
              xml = $(container).find("#mode-xml");
              std = $(container).find("#mode-std");
              stored_txt_canvas = null;
              $(imgOnly).click(function(e) {
                var c;
                e.preventDefault();
                if (!$(imgOnly).hasClass('active')) {
                  stored_txt_canvas = $('*[data-types=Text]').parent();
                  $('*[data-types=Text]').parent().remove();
                  c = /col-lg-(\d+)/g.exec($('*[data-types=Image]').parent()[0].className);
                  $('*[data-types=Image]').parent()[0].className = 'col-lg-' + parseInt(c[1]) * 2;
                  $('*[data-types=Image]').trigger('resetPres');
                  return that.setMode('imgOnly');
                }
              });
              return $(std).click(function(e) {
                var c, img_parent;
                e.preventDefault();
                if (!$(std).hasClass('active') && (stored_txt_canvas != null)) {
                  img_parent = $('*[data-types=Image]').parent();
                  c = /col-lg-(\d+)/g.exec($('*[data-types=Image]').parent()[0].className);
                  img_parent[0].className = 'col-lg-' + parseInt(c[1]) / 2;
                  stored_txt_canvas.insertAfter(img_parent);
                  return $('*[data-types=Image]').trigger('resetPres');
                }
              });
            }]));
          };
        });
        return Component.namespace("LimitViewControls", function(LimitViewControls) {
          return LimitViewControls.initInstance = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHgrid.initInstance.apply(MITHgrid, ["SGA.Reader.Component.LimitViewControls"].concat(__slice.call(args), [function(that, container) {
              var $c;
              $c = $(container);
              $c.find('#hand-view_2').change(function() {
                var css;
                if ($(this).is(':checked')) {
                  css = "svg .hand-pbs{ color:#a54647; } \nsvg *:not(.hand-pbs), svg .DeletionAnnotation:not(.hand-pbs){ color:#D9D9D9; }\nsvg .DeletionAnnotation.hand-pbs{ color:#a54647; }";
                  $('#LimitViewControls_classes').remove();
                  return $("<style type='text/css' id='LimitViewControls_classes'>" + css + "</style>").appendTo("head");
                }
              });
              $c.find('#hand-view_1').change(function() {
                var css;
                if ($(this).is(':checked')) {
                  css = "svg .hand-pbs{ color:#D9D9D9; } \nsvg *:not(.hand-pbs), svg .DeletionAnnotation.hand-pbs{ color:#a54647; }\nsvg .DeletionAnnotation:not(.hand-pbs){ color:#a54647 }";
                  $('#LimitViewControls_classes').remove();
                  return $("<style type='text/css' id='LimitViewControls_classes'>" + css + "</style>").appendTo("head");
                }
              });
              return $c.find('#hand-view_0').change(function() {
                if ($(this).is(':checked')) {
                  return $('#LimitViewControls_classes').remove();
                }
              });
            }]));
          };
        });
      });
      return SGAReader.namespace("Application", function(Application) {
        return Application.namespace("SharedCanvas", function(SharedCanvas) {
          SharedCanvas.initInstance = function() {
            var args, _ref;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHgrid.Application).initInstance.apply(_ref, ["SGA.Reader.Application.SharedCanvas"].concat(__slice.call(args), [function(that) {
              var currentSequence, extractSpatialConstraint, extractTextBody, extractTextTarget, manifestData, options, presentations, textSource;
              options = that.options;
              presentations = [];
              that.addPresentation = function(config) {
                var p;
                p = SGA.Reader.Presentation.Canvas.initInstance(config.container, {
                  types: config.types,
                  application: function() {
                    return that;
                  },
                  dataView: that.dataView.canvasAnnotations
                });
                return presentations.push([p, config.container]);
              };
              currentSequence = null;
              that.events.onSequenceChange.addListener(function(s) {
                var hash, n, p, paras, seq, _ref;
                currentSequence = s;
                seq = that.dataStore.data.getItem(currentSequence);
                hash = $.param.fragment(window.location.href);
                paras = $.deparam(hash);
                n = parseInt(paras.n);
                if ((paras.n != null) && (seq.sequence.length >= (_ref = n - 1) && _ref >= 0)) {
                  p = n - 1;
                } else {
                  if ((seq != null ? seq.sequence : void 0) != null) {
                    p = seq.sequence.indexOf(that.getCanvas());
                  }
                  if (p < 0) {
                    p = 0;
                  }
                }
                return that.setPosition(p);
              });
              that.events.onPositionChange.addListener(function(p) {
                var canvasKey, seq, _ref;
                seq = that.dataStore.data.getItem(currentSequence);
                canvasKey = (_ref = seq.sequence) != null ? _ref[p] : void 0;
                return that.setCanvas(canvasKey);
              });
              that.events.onCanvasChange.addListener(function(k) {
                var allAnnos, annos, canvasKey, p, seq, _ref;
                that.dataView.canvasAnnotations.setKey(k);
                seq = that.dataStore.data.getItem(currentSequence);
                p = seq.sequence.indexOf(k);
                if (p >= 0 && p !== that.getPosition()) {
                  that.setPosition(p);
                }
                canvasKey = (_ref = seq.sequence) != null ? _ref[p] : void 0;
                allAnnos = that.dataView.canvasAnnotations.items();
                if (allAnnos.length > 0) {
                  that.dataView.canvasAnnotations.removeItems(allAnnos);
                  annos = that.getAnnotationsForCanvas(canvasKey);
                  that.dataStore.data.removeItems(annos);
                }
                Q.nfcall(that.loadCanvas, k).then(function() {
                  return setTimeout((function() {
                    var pp, _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = presentations.length; _i < _len; _i++) {
                      pp = presentations[_i];
                      _results.push(pp[0].setCanvas(k));
                    }
                    return _results;
                  }), 100);
                });
                return k;
              });
              manifestData = SGA.Reader.Data.Manifest.initInstance();
              that.events.onItemsProcessedChange = manifestData.events.onItemsProcessedChange;
              that.events.onItemsToProcessChange = manifestData.events.onItemsToProcessChange;
              that.getItemsProcessed = manifestData.getItemsProcessed;
              that.getItemsToProcess = manifestData.getItemsToProcess;
              that.setItemsProcessed = manifestData.setItemsProcessed;
              that.setItemsToProcess = manifestData.setItemsToProcess;
              that.addItemsProcessed = manifestData.addItemsProcessed;
              that.addItemsToProcess = manifestData.addItemsToProcess;
              that.addManifestData = manifestData.importFromURL;
              that.getAnnotationsForCanvas = manifestData.getAnnotationsForCanvas;
              that.flushSearchResults = manifestData.flushSearchResults;
              that.getSearchResultCanvases = manifestData.getSearchResultCanvases;
              textSource = SGA.Reader.Data.TextStore.initInstance();
              that.withSource = textSource.withFile;
              extractSpatialConstraint = function(item, id) {
                var bits, constraint, _ref, _ref1;
                if (id == null) {
                  return;
                }
                constraint = manifestData.getItem(id);
                if (__indexOf.call(constraint.type, 'oaFragmentSelector') >= 0) {
                  if (constraint.rdfvalue[0].substr(0, 5) === "xywh=") {
                    item.shape = "Rectangle";
                    bits = constraint.rdfvalue[0].substr(5).split(",");
                    item.x = parseInt(bits[0], 10);
                    item.y = parseInt(bits[1], 10);
                    item.width = parseInt(bits[2], 10);
                    return item.height = parseInt(bits[3], 10);
                  }
                } else {
                  if (constraint.oaxbegin != null) {
                    item.start = parseInt((_ref = constraint.oaxbegin) != null ? _ref[0] : void 0, 10);
                  }
                  if (constraint.oaxend != null) {
                    return item.end = parseInt((_ref1 = constraint.oaxend) != null ? _ref1[0] : void 0, 10);
                  }
                }
              };
              extractTextTarget = function(item, id) {
                var styleItem, target, _ref;
                if (id == null) {
                  return;
                }
                target = manifestData.getItem(id);
                if (__indexOf.call(target.type, "oaSpecificResource") >= 0) {
                  item.target = target.oahasSource;
                  if (target.oahasStyle != null) {
                    styleItem = manifestData.getItem(target.oahasStyle[0]);
                    if (__indexOf.call(styleItem.dcformat, "text/css") >= 0) {
                      item.css = styleItem.cntchars;
                    }
                  }
                  if (target.sgahasClass != null) {
                    item.cssclass = target.sgahasClass[0];
                  }
                  return extractSpatialConstraint(item, (_ref = target.oahasSelector) != null ? _ref[0] : void 0);
                } else {
                  return item.target = id;
                }
              };
              extractTextBody = function(item, id) {
                var body, _ref;
                if (id == null) {
                  return;
                }
                body = manifestData.getItem(id);
                textSource.addFile(body.oahasSource);
                item.source = body.oahasSource;
                return extractSpatialConstraint(item, (_ref = body.oahasSelector) != null ? _ref[0] : void 0);
              };
              that.loadCanvas = function(canvas, cb) {
                var annos, deferred, items, syncer, textAnnos, textSources;
                deferred = Q.defer();
                items = [];
                textSources = {};
                textAnnos = [];
                syncer = MITHgrid.initSynchronizer();
                annos = manifestData.getAnnotationsForCanvas(canvas);
                that.addItemsToProcess(annos.length);
                syncer.process(annos, function(id) {
                  var aitem, array, f, imgitem, item, sgaTypes, target, _name, _ref, _ref1, _ref2, _ref3;
                  that.addItemsProcessed(1);
                  aitem = manifestData.getItem(id);
                  array = null;
                  item = {
                    id: id
                  };
                  if (__indexOf.call(aitem.type, "scContentAnnotation") >= 0) {
                    extractTextTarget(item, (_ref = aitem.oahasTarget) != null ? _ref[0] : void 0);
                    extractTextBody(item, (_ref1 = aitem.oahasBody) != null ? _ref1[0] : void 0);
                    if ((item.start != null) && (item.end != null)) {
                      if (textSources[_name = item.source] == null) {
                        textSources[_name] = [];
                      }
                      textSources[item.source].push([id, item.start, item.end]);
                    }
                    if (item.text != null) {
                      item.type = "ContentAnnotation";
                    } else {
                      item.type = "TextContentZone";
                    }
                    array = items;
                  } else if (__indexOf.call(aitem.type, "scImageAnnotation") >= 0) {
                    imgitem = manifestData.getItem(aitem.oahasBody);
                    if ($.isArray(imgitem)) {
                      imgitem = imgitem[0];
                    }
                    array = items;
                    item.target = aitem.oahasTarget;
                    item.label = aitem.rdfslabel;
                    item.image = imgitem.oahasSource || aitem.oahasBody;
                    item.type = "Image";
                    if (__indexOf.call(imgitem["dcformat"], "image/jp2") >= 0 && (that.imageControls != null)) {
                      item.type = "ImageViewer";
                    }
                  } else if (__indexOf.call(aitem.type, "scZoneAnnotation") >= 0) {
                    target = manifestData.getItem(aitem.oahasTarget);
                    extractSpatialConstraint(item, (_ref2 = target.hasSelector) != null ? _ref2[0] : void 0);
                    array = items;
                    item.target = target.hasSource;
                    item.label = aitem.rdfslabel;
                    item.type = "ZoneAnnotation";
                  } else {
                    sgaTypes = (function() {
                      var _i, _len, _ref3, _results;
                      _ref3 = aitem.type;
                      _results = [];
                      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
                        f = _ref3[_i];
                        if (f.substr(0, 3) === "sga" && f.substr(f.length - 10) === "Annotation") {
                          _results.push(f.substr(3));
                        }
                      }
                      return _results;
                    })();
                    if (sgaTypes.length > 0) {
                      extractTextTarget(item, (_ref3 = aitem.oahasTarget) != null ? _ref3[0] : void 0);
                      item.type = sgaTypes;
                      array = textAnnos;
                    }
                  }
                  if ((item.type != null) && (array != null)) {
                    return array.push(item);
                  }
                });
                syncer.done(function() {
                  that.addItemsToProcess(1 + textAnnos.length);
                  return that.dataStore.data.loadItems(items, function() {
                    var item, modInfo, modend, modstart, s, setMod, source, sources, _fn, _i, _j, _len, _len1;
                    items = [];
                    modstart = {};
                    modend = {};
                    modInfo = {};
                    setMod = function(item) {
                      var end, id, source, start, _base, _base1;
                      source = item.target;
                      start = item.start;
                      end = item.end;
                      id = item.id;
                      if ($.isArray(id)) {
                        id = id[0];
                      }
                      modInfo[id] = item;
                      if (modstart[source] == null) {
                        modstart[source] = {};
                      }
                      if ((_base = modstart[source])[start] == null) {
                        _base[start] = [];
                      }
                      modstart[source][start].push(id);
                      if (modend[source] == null) {
                        modend[source] = {};
                      }
                      if ((_base1 = modend[source])[end] == null) {
                        _base1[end] = [];
                      }
                      return modend[source][end].push(id);
                    };
                    for (_i = 0, _len = textAnnos.length; _i < _len; _i++) {
                      item = textAnnos[_i];
                      setMod(item);
                    }
                    sources = (function() {
                      var _results;
                      _results = [];
                      for (s in modstart) {
                        _results.push(s);
                      }
                      return _results;
                    })();
                    that.addItemsToProcess(sources.length);
                    that.addItemsProcessed(textAnnos.length);
                    _fn = function(source) {
                      return that.withSource(source, function(text) {
                        var br_pushed, id, idx, last_pos, makeLinebreak, makeTextItems, mends, modIds, mstarts, needs_br, p, pos, positions, processNode, pushTextItem, textItems, _k, _l, _len2, _len3, _len4, _m, _ref, _ref1;
                        textItems = [];
                        modIds = [];
                        br_pushed = false;
                        pushTextItem = function(classes, css, target, start, end) {
                          return textItems.push({
                            type: classes,
                            css: css.join(" "),
                            text: text.slice(start, end),
                            id: source + "-" + start + "-" + end,
                            target: target,
                            start: start,
                            end: end
                          });
                        };
                        processNode = function(start, end) {
                          var classes, css, id, _k, _len2;
                          classes = [];
                          css = [];
                          for (_k = 0, _len2 = modIds.length; _k < _len2; _k++) {
                            id = modIds[_k];
                            classes.push(modInfo[id].type);
                            if (modInfo[id].cssclass != null) {
                              classes.push(modInfo[id].cssclass);
                            }
                            if ($.isArray(modInfo[id].css)) {
                              css.push(modInfo[id].css.join(" "));
                            } else {
                              css.push(modInfo[id].css);
                            }
                          }
                          if (classes.length === 0) {
                            classes.push("Text");
                          }
                          return makeTextItems(start, end, classes, css);
                        };
                        makeTextItems = function(start, end, classes, css) {
                          var candidate, e, _k, _len2, _ref;
                          _ref = textSources[source] || [];
                          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                            candidate = _ref[_k];
                            if (start <= candidate[2] && end >= candidate[1]) {
                              s = Math.min(Math.max(start, candidate[1]), candidate[2]);
                              e = Math.max(Math.min(end, candidate[2]), candidate[1]);
                              pushTextItem(classes, css, candidate[0], s, e);
                            }
                          }
                          return false;
                        };
                        makeLinebreak = function(pos) {
                          var classes;
                          classes = ["LineBreak"];
                          return makeTextItems(pos, pos, classes, [""]);
                        };
                        mstarts = modstart[source] || [];
                        mends = modend[source] || [];
                        last_pos = 0;
                        positions = ((function() {
                          var _results;
                          _results = [];
                          for (p in mstarts) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).concat((function() {
                          var _results;
                          _results = [];
                          for (p in mends) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).sort(function(a, b) {
                          return a - b;
                        });
                        for (_k = 0, _len2 = positions.length; _k < _len2; _k++) {
                          pos = positions[_k];
                          if (pos !== last_pos) {
                            processNode(last_pos, pos);
                            if (br_pushed && !text.substr(last_pos, pos - last_pos).match(/^\s*$/)) {
                              br_pushed = false;
                            }
                            needs_br = false;
                            _ref = mstarts[pos] || [];
                            for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
                              id = _ref[_l];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              modIds.push(id);
                            }
                            _ref1 = mends[pos] || [];
                            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
                              id = _ref1[_m];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              idx = modIds.indexOf(id);
                              if (idx > -1) {
                                modIds.splice(idx, 1);
                              }
                            }
                            if (needs_br && !br_pushed) {
                              makeLinebreak(pos);
                              br_pushed = true;
                            }
                            last_pos = pos;
                          }
                        }
                        processNode(last_pos, text.length);
                        return that.dataStore.data.loadItems(textItems, function() {
                          return that.addItemsProcessed(1);
                        });
                      });
                    };
                    for (_j = 0, _len1 = sources.length; _j < _len1; _j++) {
                      source = sources[_j];
                      _fn(source);
                    }
                    deferred.resolve();
                    return that.addItemsProcessed(1);
                  });
                });
                if (cb != null) {
                  cb();
                }
                return deferred.promise;
              };
              if (options.url != null) {
                manifestData.importFromURL(options.url, function() {
                  var canvases, items, ranges, seq, syncer, zones;
                  items = [];
                  syncer = MITHgrid.initSynchronizer();
                  canvases = manifestData.getCanvases();
                  that.addItemsToProcess(canvases.length);
                  syncer.process(canvases, function(id) {
                    var mitem, _ref, _ref1;
                    that.addItemsProcessed(1);
                    mitem = manifestData.getItem(id);
                    return items.push({
                      id: id,
                      type: 'Canvas',
                      width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                      height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                      label: mitem.dctitle || mitem.rdfslabel
                    });
                  });
                  zones = manifestData.getZones();
                  that.addItemsToProcess(zones.length);
                  syncer.process(zones, function(id) {
                    var zitem, _ref, _ref1, _ref2;
                    that.addItemsProcessed(1);
                    zitem = manifestData.getItem(id);
                    return items.push({
                      id: id,
                      type: 'Zone',
                      width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                      height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                      angle: parseInt((_ref2 = mitem.scnaturalAngle) != null ? _ref2[0] : void 0, 10) || 0,
                      label: zitem.rdfslabel
                    });
                  });
                  seq = manifestData.getSequences();
                  that.addItemsToProcess(seq.length);
                  syncer.process(seq, function(id) {
                    var item, sitem;
                    that.addItemsProcessed(1);
                    sitem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Sequence',
                      label: sitem.rdfslabel
                    };
                    seq = [];
                    seq.push(sitem.rdffirst[0]);
                    sitem = manifestData.getItem(sitem.rdfrest[0]);
                    while (sitem.id != null) {
                      seq.push(sitem.rdffirst[0]);
                      sitem = manifestData.getItem(sitem.rdfrest[0]);
                    }
                    item.sequence = seq;
                    return items.push(item);
                  });
                  ranges = manifestData.getRanges();
                  that.addItemsToProcess(ranges.length);
                  syncer.process(ranges, function(id) {
                    var contents, item, ritem;
                    that.addItemsProcessed(1);
                    ritem = manifestData.getItem(id);
                    item = {
                      id: id,
                      type: 'Range',
                      label: ritem.rdfslabel
                    };
                    contents = [];
                    contents.push(ritem.rdffirst[0]);
                    ritem = manifestData.getItem(ritem.rdfrest[0]);
                    while (ritem.id != null) {
                      contents.push(ritem.rdffirst[0]);
                      ritem = manifestData.getItem(ritem.rdfrest[0]);
                    }
                    item.canvases = contents;
                    return items.push(item);
                  });
                  return syncer.done(function() {
                    return that.dataStore.data.loadItems(items);
                  });
                });
              }
              that.getRangeMetadata = function(id) {
                var info, meta, _ref;
                meta = {};
                info = that.dataStore.data.getItem(id);
                meta.rangeTitle = (_ref = info.label) != null ? _ref[0] : void 0;
                return meta;
              };
              that.getManifestMetadata = function(id) {
                var info, ret, _ref, _ref1;
                ret = {};
                if (id == null) {
                  id = options.url;
                }
                if (id != null) {
                  info = manifestData.getItem(id);
                  ret.workTitle = ((_ref = info.dctitle) != null ? _ref[0] : void 0) || ((_ref1 = info.rdfslabel) != null ? _ref1[0] : void 0);
                }
                return ret;
              };
              return that.getCanvasMetadata = function(id) {
                var info, meta, rangeIds, rangeTitles, _ref;
                meta = that.getManifestMetadata();
                info = that.dataStore.data.getItem(id);
                meta.canvasTitle = (_ref = info.label) != null ? _ref[0] : void 0;
                rangeIds = that.dataStore.data.getSubjectsUnion(MITHgrid.Data.Set.initInstance([id]), 'canvases');
                rangeTitles = {};
                rangeIds.visit(function(rid) {
                  var rmeta;
                  rmeta = that.getRangeMetadata(rid);
                  if (rmeta.rangeTitle != null) {
                    meta.rangeTitle || (meta.rangeTitle = []);
                    return meta.rangeTitle.push(rmeta.rangeTitle);
                  }
                });
                return meta;
              };
            }]));
          };
          return SharedCanvas.builder = function(config) {
            var manifestCallbacks, that, updateProgressTracker, updateProgressTrackerVisibility, updateSearchResults, updateSpinnerVisibility, uptv, uptvTimer;
            that = {
              manifests: {}
            };
            manifestCallbacks = {};
            updateProgressTracker = function() {};
            updateProgressTrackerVisibility = function() {};
            updateSpinnerVisibility = function() {};
            updateSearchResults = function() {};
            if (config.spinner != null) {
              updateSpinnerVisibility = function() {
                var m, obj, tot, _ref, _results;
                _ref = that.manifests;
                _results = [];
                for (m in _ref) {
                  obj = _ref[m];
                  tot = obj.getItemsToProcess();
                  _results.push(obj.events.onItemsToProcessChange.addListener(function(i) {
                    if (i > tot) {
                      return config.spinner.hide();
                    }
                  }));
                }
                return _results;
              };
            }
            if (config.progressTracker != null) {
              updateProgressTracker = function() {
                var d, m, n, obj, _ref;
                n = 0;
                d = 0;
                _ref = that.manifests;
                for (m in _ref) {
                  obj = _ref[m];
                  n += obj.getItemsProcessed();
                  d += obj.getItemsToProcess();
                }
                config.progressTracker.setNumerator(n);
                return config.progressTracker.setDenominator(d || 1);
              };
              uptv = null;
              uptvTimer = 1000;
              updateProgressTrackerVisibility = function() {
                if (uptv != null) {
                  return uptvTimer = 500;
                } else {
                  uptv = function() {
                    var m, obj, _ref;
                    _ref = that.manifests;
                    for (m in _ref) {
                      obj = _ref[m];
                      if (obj.getItemsToProcess() > obj.getItemsProcessed()) {
                        config.progressTracker.show();
                        uptvTimer /= 2;
                        if (uptvTimer < 500) {
                          uptvTimer = 500;
                        }
                        setTimeout(uptv, uptvTimer);
                        return;
                      }
                    }
                    if (uptvTimer > 500) {
                      config.progressTracker.hide();
                    }
                    uptvTimer *= 2;
                    if (uptvTimer > 10000) {
                      uptvTimer = 10000;
                    }
                    return setTimeout(uptv, uptvTimer);
                  };
                  return uptv();
                }
              };
            }
            if (config.searchBox != null) {
              if (config.searchBox.getServiceURL() != null) {
                $.param.fragment.noEscape(':,/|');
                updateSearchResults = function(q) {
                  var m, obj, queryURL, _ref, _results;
                  queryURL = config.searchBox.getServiceURL() + q;
                  _ref = that.manifests;
                  _results = [];
                  for (m in _ref) {
                    obj = _ref[m];
                    obj.flushSearchResults();
                    _results.push(obj.addManifestData(queryURL, function() {
                      var canvasKey, canvasesWithResults, cwr, cwrPos, p, s, seq, _i, _len, _ref1;
                      p = obj.getPosition();
                      s = obj.getSequence();
                      seq = obj.dataStore.data.getItem(s);
                      canvasKey = (_ref1 = seq.sequence) != null ? _ref1[p] : void 0;
                      canvasesWithResults = obj.getSearchResultCanvases();
                      cwrPos = [];
                      for (_i = 0, _len = canvasesWithResults.length; _i < _len; _i++) {
                        cwr = canvasesWithResults[_i];
                        cwrPos.push($.inArray(cwr, seq.sequence));
                      }
                      $('.canvas').trigger("searchResultsChange", [cwrPos]);
                      return Q.fcall(obj.loadCanvas, canvasKey).then(function() {
                        var newPage;
                        if (p === 0) {
                          newPage = p + 1;
                        } else {
                          newPage = p - 1;
                        }
                        setTimeout(function() {
                          return obj.setPosition(newPage, 0);
                        });
                        return setTimeout(function() {
                          return obj.setPosition(p, 0);
                        });
                      });
                    }));
                  }
                  return _results;
                };
                config.searchBox.events.onQueryChange.addListener(function(q) {
                  return updateSearchResults(q);
                });
              } else {
                console.log("You must specify the URL to some search service.");
              }
            }
            that.onManifest = function(url, cb) {
              if (that.manifests[url] != null) {
                return that.manifests[url].ready(function() {
                  return cb(that.manifests[url]);
                });
              } else {
                if (manifestCallbacks[url] == null) {
                  manifestCallbacks[url] = [];
                }
                return manifestCallbacks[url].push(cb);
              }
            };
            that.addPresentation = function(el) {
              var manifest, manifestUrl, types, _ref;
              manifestUrl = $(el).data('manifest');
              if (manifestUrl != null) {
                manifest = that.manifests[manifestUrl];
                if (manifest == null) {
                  manifest = Application.SharedCanvas.initInstance({
                    url: manifestUrl
                  });
                  that.manifests[manifestUrl] = manifest;
                  manifest.ready(function() {
                    var cb, cbs, _i, _len;
                    cbs = manifestCallbacks[manifestUrl] || [];
                    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
                      cb = cbs[_i];
                      cb(manifest);
                    }
                    return delete manifestCallbacks[manifestUrl];
                  });
                  manifest.events.onItemsToProcessChange.addListener(updateProgressTracker);
                  manifest.events.onItemsProcessedChange.addListener(updateProgressTracker);
                  updateProgressTrackerVisibility();
                  updateSpinnerVisibility();
                  if (config.searchBox != null) {
                    manifest.ready(function() {
                      var removeListener;
                      if (manifest.getSequence() == null) {
                        return removeListener = manifest.events.onSequenceChange.addListener(function() {
                          var bbq_q;
                          bbq_q = $.bbq.getState('s');
                          if (bbq_q != null) {
                            bbq_q = bbq_q.replace(/:/g, '=');
                            bbq_q = bbq_q.replace(/\|/g, '&');
                            updateSearchResults(bbq_q);
                          }
                          return removeListener();
                        });
                      }
                    });
                  }
                }
                manifest.run();
                types = (_ref = $(el).data('types')) != null ? _ref.split(/\s*,\s*/) : void 0;
                return that.onManifest(manifestUrl, function(manifest) {
                  return manifest.addPresentation({
                    types: types,
                    container: $(el)
                  });
                });
              }
            };
            if (config["class"] == null) {
              config["class"] = ".canvas";
            }
            $(config["class"]).each(function(idx, el) {
              return that.addPresentation(el);
            });
            return that;
          };
        });
      });
    });
  })(jQuery, MITHgrid);

  MITHgrid.defaults('SGA.Reader.Application.SharedCanvas', {
    dataStores: {
      data: {
        types: {
          Sequence: {},
          Canvas: {}
        },
        properties: {
          target: {
            valueType: 'item'
          }
        }
      }
    },
    dataViews: {
      canvasAnnotations: {
        dataStore: 'data',
        type: MITHgrid.Data.SubSet,
        expressions: ['!target']
      },
      sequences: {
        dataStore: 'data',
        types: ['Sequence']
      }
    },
    variables: {
      Canvas: {
        is: 'rw'
      },
      Sequence: {
        is: 'rw'
      },
      Position: {
        is: 'lrw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.Slider', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.PagerControls', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.SequenceSelector', {
    variables: {
      Sequence: {
        is: 'rw'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ProgressBar', {
    variables: {
      Numerator: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      Denominator: {
        is: 'rw',
        "default": 1,
        isa: 'numeric'
      }
    },
    viewSetup: "<div class=\"progress progress-striped active\">\n  <div class=\"bar\" style=\"width: 0%;\"></div>\n</div>"
  });

  MITHgrid.defaults('SGA.Reader.Component.Spinner', {
    viewSetup: "<i class=\"icon-spinner icon-spin icon-3x\"></i>"
  });

  MITHgrid.defaults('SGA.Reader.Presentation.Canvas', {
    variables: {
      Canvas: {
        is: 'rw'
      },
      Scale: {
        is: 'rw',
        isa: 'numeric'
      },
      ImgOnly: {
        is: 'rw'
      },
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Presentation.TextContent', {
    variables: {
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Presentation.Zone', {
    variables: {
      Height: {
        is: 'rw',
        isa: 'numeric'
      },
      Width: {
        is: 'rw',
        isa: 'numeric'
      },
      X: {
        is: 'rw',
        isa: 'numeric'
      },
      Y: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Data.Manifest', {
    variables: {
      ItemsToProcess: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      ItemsProcessed: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ImageControls', {
    variables: {
      Active: {
        is: 'rw',
        "default": false
      },
      Zoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      MaxZoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      MinZoom: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      ImgPosition: {
        is: 'rw',
        "default": {}
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.SearchBox', {
    variables: {
      Field: {
        is: 'rw',
        "default": false
      },
      Query: {
        is: 'rw',
        "default": false
      },
      ServiceURL: {
        is: 'rw',
        "default": false
      }
    }
  });

  MITHgrid.defaults('SGA.Reader.Component.ModeControls', {
    variables: {
      Mode: {
        is: 'rw'
      }
    }
  });

}).call(this);
