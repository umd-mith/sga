// Generated by CoffeeScript 1.6.2
/*
# SGA Shared Canvas v0.0.1
#
# **SGA Shared Canvas** is a shared canvas reader written in CoffeeScript.
#
# Date: Wed Jun 5 11:35:27 2013 -0400
#
# (c) Copyright University of Maryland 2012.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
*/


(function() {
  var __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($, MITHGrid) {
    MITHGrid.globalNamespace("SGA");
    return SGA.namespace("Reader", function(SGAReader) {
      SGAReader.namespace("Data", function(Data) {
        Data.namespace("TextStore", function(TextStore) {
          return TextStore.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHGrid.initInstance.apply(MITHGrid, __slice.call(args).concat([function(that) {
              var fileContents, loadingFiles, options, pendingFiles;

              options = that.options;
              fileContents = {};
              loadingFiles = {};
              pendingFiles = {};
              that.addFile = function(files) {
                var file, _i, _len, _results;

                if (!$.isArray(files)) {
                  files = [files];
                }
                _results = [];
                for (_i = 0, _len = files.length; _i < _len; _i++) {
                  file = files[_i];
                  _results.push((function(file) {
                    if ((file != null) && (fileContents[file] == null) && (loadingFiles[file] == null)) {
                      loadingFiles[file] = [];
                      return $.ajax({
                        url: file,
                        type: 'GET',
                        processData: false,
                        success: function(data) {
                          var c, f, _j, _len1, _ref;

                          c = data.documentElement.textContent;
                          fileContents[file] = c;
                          _ref = loadingFiles[file];
                          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            f = _ref[_j];
                            f(c);
                          }
                          return delete loadingFiles[file];
                        }
                      });
                    }
                  })(file));
                }
                return _results;
              };
              return that.withFile = function(file, cb) {
                if (fileContents[file] != null) {
                  return cb(fileContents[file]);
                } else if (loadingFiles[file] != null) {
                  return loadingFiles[file].push(cb);
                }
              };
            }]));
          };
        });
        return Data.namespace("Manifest", function(Manifest) {
          var NS;

          NS = {
            "http://dms.stanford.edu/ns/": "sc",
            "http://www.shared-canvas.org/ns/": "sc",
            "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
            "http://www.w3.org/2003/12/exif/ns#": "exif",
            "http://purl.org/dc/elements/1.1/": "dc",
            "http://www.w3.org/ns/openannotation/core/": "oa",
            "http://www.openannotation.org/ns/": "oa",
            "http://www.w3.org/ns/openannotation/extension/": "oax",
            "http://www.openarchives.org/ore/terms/": "ore",
            "http://www.shelleygodwinarchive.org/ns/1#": "sga",
            "http://www.shelleygodwinarchive.org/ns1#": "sga",
            "http://www.w3.org/2011/content#": "cnt"
          };
          return Manifest.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHGrid.initInstance.apply(MITHGrid, ["SGA.Reader.Data.Manifest"].concat(__slice.call(args), [function(that) {
              var data, importFromURL, itemsWithType, loadedUrls, options;

              options = that.options;
              data = MITHGrid.Data.Store.initInstance();
              that.size = function() {
                return data.size();
              };
              loadedUrls = [];
              importFromURL = function(url, cb) {
                if (__indexOf.call(loadedUrls, url) >= 0) {
                  cb();
                  return;
                }
                loadedUrls.push(url);
                that.addItemsToProcess(1);
                return $.ajax({
                  url: url,
                  type: 'GET',
                  contentType: 'application/rdf+json',
                  processData: false,
                  dataType: 'json',
                  success: function(data) {
                    return that.importJSON(data, cb);
                  },
                  error: cb
                });
              };
              that.importJSON = function(json, cb) {
                var items, s, subjects, syncer;

                items = [];
                syncer = MITHGrid.initSynchronizer();
                subjects = (function() {
                  var _results;

                  _results = [];
                  for (s in json) {
                    _results.push(s);
                  }
                  return _results;
                })();
                that.addItemsToProcess(subjects.length);
                syncer.process(subjects, function(s) {
                  var item, ns, o, os, p, pname, predicates, prefix, url, values, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

                  predicates = json[s];
                  item = {
                    id: s
                  };
                  for (p in predicates) {
                    os = predicates[p];
                    values = [];
                    if (p === "http://www.w3.org/1999/02/22-rdf-syntax-ns#type") {
                      for (_i = 0, _len = os.length; _i < _len; _i++) {
                        o = os[_i];
                        if (o.type === "uri") {
                          for (ns in NS) {
                            prefix = NS[ns];
                            if (o.value.slice(0, ns.length) === ns) {
                              values.push(prefix + o.value.substr(ns.length));
                            }
                          }
                        }
                      }
                      item.type = values;
                    } else {
                      for (_j = 0, _len1 = os.length; _j < _len1; _j++) {
                        o = os[_j];
                        if (o.type === "literal") {
                          values.push(o.value);
                        } else if (o.type === "uri") {
                          if (o.value.substr(0, 1) === "(" && o.value.substr(-1) === ")") {
                            values.push("_:" + o.value.substr(1, o.value.length - 2));
                          } else {
                            values.push(o.value);
                          }
                        } else if (o.type === "bnode") {
                          if (o.value.substr(0, 1) === "(" && o.value.substr(-1) === ")") {
                            values.push("_:" + o.value.substr(1, o.value.length - 2));
                          } else {
                            values.push(o.value);
                          }
                        }
                      }
                      if (values.length > 0) {
                        for (ns in NS) {
                          prefix = NS[ns];
                          if (p.substr(0, ns.length) === ns) {
                            pname = prefix + p.substr(ns.length);
                            item[pname] = values;
                          }
                        }
                      }
                    }
                  }
                  if ((item.type == null) || item.type.length === 0) {
                    item.type = 'Blank';
                  }
                  if (((_ref = item.oreisDescribedBy) != null ? _ref.length : void 0) > 0) {
                    _ref1 = item.oreisDescribedBy;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                      url = _ref1[_k];
                      syncer.increment();
                      importFromURL(url, syncer.decrement);
                    }
                  } else {
                    items.push(item);
                  }
                  return that.addItemsProcessed(1);
                });
                return syncer.done(function() {
                  that.addItemsProcessed(1);
                  return setTimeout(function() {
                    var item, _i, _len;

                    for (_i = 0, _len = items.length; _i < _len; _i++) {
                      item = items[_i];
                      if (data.contains(item.id)) {
                        data.updateItems([item]);
                      } else {
                        data.loadItems([item]);
                      }
                    }
                    if (cb != null) {
                      return cb();
                    }
                  }, 0);
                });
              };
              itemsWithType = function(type) {
                var types;

                if (!$.isArray(type)) {
                  type = [type];
                }
                types = MITHGrid.Data.Set.initInstance(type);
                return data.getSubjectsUnion(types, "type").items();
              };
              that.getCanvases = function() {
                return itemsWithType('scCanvas');
              };
              that.getZones = function() {
                return itemsWithType('scZone');
              };
              that.getSequences = function() {
                return itemsWithType('scSequence');
              };
              that.getAnnotations = function() {
                return itemsWithType('oaAnnotation');
              };
              that.getItem = data.getItem;
              that.contains = data.contains;
              return that.importFromURL = function(url, cb) {
                return importFromURL(url, function() {
                  if (cb != null) {
                    return cb();
                  }
                });
              };
            }]));
          };
        });
      });
      SGAReader.namespace("Presentation", function(Presentation) {
        Presentation.namespace("TextContent", function(TextContent) {
          return TextContent.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.TextContent"].concat(__slice.call(args), [function(that, container) {
              var makeAnnoLens, options;

              options = that.options;
              makeAnnoLens = function(type) {
                return that.addLens(type, function(container, view, model, id) {
                  var el, item, rendering, _ref;

                  rendering = {};
                  el = $("<span></span>");
                  rendering.$el = el;
                  item = model.getItem(id);
                  el.text(item.text[0]);
                  el.addClass(item.type.join(" "));
                  el.attr("style", (_ref = item.css) != null ? _ref[0] : void 0);
                  $(container).append(el);
                  rendering.remove = function() {
                    return el.remove();
                  };
                  rendering.update = function(item) {
                    return el.text(item.text[0]);
                  };
                  return rendering;
                });
              };
              makeAnnoLens('AdditionAnnotation');
              makeAnnoLens('DeletionAnnotation');
              makeAnnoLens('SearchAnnotation');
              makeAnnoLens('LineAnnotation');
              makeAnnoLens('Text');
              return that.addLens('LineBreak', function(container, view, model, id) {
                var el, rendering;

                rendering = {};
                el = $("<br/>");
                rendering.$el = el;
                $(container).append(el);
                rendering.remove = function() {
                  return el.remove();
                };
                rendering.update = function(item) {};
                return rendering;
              });
            }]));
          };
        });
        Presentation.namespace("Zone", function(Zone) {
          return Zone.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Zone"].concat(__slice.call(args), [function(that, container) {
              var annoExpr, options, svgRoot;

              options = that.options;
              svgRoot = options.svgRoot;
              annoExpr = that.dataView.prepare(['!target']);
              that.addLens('Image', function(container, view, model, id) {
                var height, item, rendering, svgImage, width, x, y, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                svgImage = null;
                if ((((_ref = item.image) != null ? _ref[0] : void 0) != null) && (svgRoot != null)) {
                  x = ((_ref1 = item.x) != null ? _ref1[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref2 = item.y) != null ? _ref2[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref3 = item.width) != null ? _ref3[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref4 = item.height) != null ? _ref4[0] : void 0) != null ? item.height[0] : options.height - y;
                  svgImage = svgRoot.image(container, x, y, width, height, (_ref5 = item.image) != null ? _ref5[0] : void 0, {
                    preserveAspectRatio: 'none'
                  });
                }
                rendering.update = function(item) {
                  var _ref10, _ref11, _ref6, _ref7, _ref8, _ref9;

                  if ((((_ref6 = item.image) != null ? _ref6[0] : void 0) != null) && (svgRoot != null)) {
                    x = ((_ref7 = item.x) != null ? _ref7[0] : void 0) != null ? item.x[0] : 0;
                    y = ((_ref8 = item.y) != null ? _ref8[0] : void 0) != null ? item.y[0] : 0;
                    width = ((_ref9 = item.width) != null ? _ref9[0] : void 0) != null ? item.width[0] : options.width - x;
                    height = ((_ref10 = item.height) != null ? _ref10[0] : void 0) != null ? item.height[0] : options.height - y;
                    svgRoot.remove(svgImage);
                    return svgImage = svgRoot.image(container, x, y, width, height, (_ref11 = item.image) != null ? _ref11[0] : void 0, {
                      preserveAspectRatio: 'none'
                    });
                  }
                };
                rendering.remove = function() {
                  if ((svgImage != null) && (svgRoot != null)) {
                    return svgRoot.remove(svgImage);
                  }
                };
                return rendering;
              });
              that.addLens('ImageViewer', function(container, view, model, id) {
                var baseURL, djatokaURL, g, imageURL, item, map, po, rendering, svg;

                if (__indexOf.call(options.types || [], 'Image') < 0) {
                  return;
                }
                rendering = {};
                item = model.getItem(id);
                djatokaURL = "http://localhost:8080/adore-djatoka/resolver";
                imageURL = item.image[0];
                baseURL = djatokaURL + "?url_ver=Z39.88-2004&rft_id=" + imageURL;
                po = org.polymaps;
                svg = $(svgRoot.root());
                svg.removeAttr("width").removeAttr("height");
                svg.get(0).removeAttribute("viewBox");
                svg.attr("width", "100%").attr("height", "100%");
                g = svgRoot.group();
                map = po.map().container(g);
                $.ajax({
                  datatype: "json",
                  url: baseURL + '&svc_id=info:lanl-repo/svc/getMetadata',
                  success: adoratio($(container), baseURL, map)
                });
                rendering.update = function(item) {
                  return 0;
                };
                rendering.remove = function() {
                  return 0;
                };
                return rendering;
              });
              that.addLens('ZoneAnnotation', function(container, view, model, id) {
                var height, rendering, width, x, y, zone, zoneContainer, zoneDataView, zoneInfo, _ref, _ref1, _ref2, _ref3;

                rendering = {};
                zoneInfo = model.getItem(id);
                zoneContainer = null;
                zoneContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                $(zoneContainer).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
                container.appendChild(zoneContainer);
                zoneDataView = MITHGrid.Data.SubSet.initInstance({
                  dataStore: model,
                  expressions: ['!target']
                });
                zone = Zone.initInstance(zoneContainer, {
                  types: options.types,
                  dataView: zoneDataView,
                  svgRoot: svgRoot,
                  application: options.application,
                  heigth: height,
                  width: width
                });
                zoneDataView.setKey(id);
                rendering._destroy = function() {
                  if (zone._destroy != null) {
                    zone._destroy();
                  }
                  if (zoneDataView._destroy != null) {
                    return zoneDataView._destroy();
                  }
                };
                rendering.remove = function() {
                  return rendering._destroy();
                };
                rendering.update = function(item) {
                  var _ref4, _ref5, _ref6, _ref7;

                  x = ((_ref4 = item.x) != null ? _ref4[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref5 = item.y) != null ? _ref5[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref6 = item.width) != null ? _ref6[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref7 = item.height) != null ? _ref7[0] : void 0) != null ? item.height[0] : options.height - y;
                  return $(zoneContainer).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
                };
                return rendering;
              });
              return that.addLens('TextContent', function(container, view, model, id) {
                var app, bodyEl, height, item, rendering, rootEl, text, textContainer, textDataView, width, x, y, _ref, _ref1, _ref2, _ref3;

                if (__indexOf.call(options.types || [], 'Text') < 0) {
                  return;
                }
                rendering = {};
                app = options.application();
                item = model.getItem(id);
                textContainer = null;
                textContainer = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
                x = ((_ref = item.x) != null ? _ref[0] : void 0) != null ? item.x[0] : 0;
                y = ((_ref1 = item.y) != null ? _ref1[0] : void 0) != null ? item.y[0] : 0;
                width = ((_ref2 = item.width) != null ? _ref2[0] : void 0) != null ? item.width[0] : options.width - x;
                height = ((_ref3 = item.height) != null ? _ref3[0] : void 0) != null ? item.height[0] : options.height - y;
                $(textContainer).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
                container.appendChild(textContainer);
                bodyEl = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');
                rootEl = document.createElement('div');
                $(rootEl).addClass("text-content");
                $(rootEl).attr("id", id);
                $(rootEl).css("font-size", 150);
                $(rootEl).css("line-height", 1.15);
                bodyEl.appendChild(rootEl);
                textContainer.appendChild(bodyEl);
                textDataView = MITHGrid.Data.SubSet.initInstance({
                  dataStore: model,
                  expressions: ['!target']
                });
                text = Presentation.TextContent.initInstance(rootEl, {
                  types: options.types,
                  dataView: textDataView,
                  svgRoot: svgRoot,
                  application: options.application,
                  height: height,
                  width: width
                });
                textDataView.setKey(id);
                rendering._destroy = function() {
                  if (text._destroy != null) {
                    text._destroy();
                  }
                  if (textDataView._destroy != null) {
                    return textDataView._destroy();
                  }
                };
                rendering.remove = function() {};
                rendering.update = function(item) {
                  var _ref4, _ref5, _ref6, _ref7;

                  x = ((_ref4 = item.x) != null ? _ref4[0] : void 0) != null ? item.x[0] : 0;
                  y = ((_ref5 = item.y) != null ? _ref5[0] : void 0) != null ? item.y[0] : 0;
                  width = ((_ref6 = item.width) != null ? _ref6[0] : void 0) != null ? item.width[0] : options.width - x;
                  height = ((_ref7 = item.height) != null ? _ref7[0] : void 0) != null ? item.height[0] : options.height - y;
                  return $(textContainer).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
                };
                return rendering;
              });
            }]));
          };
        });
        return Presentation.namespace("Canvas", function(Canvas) {
          return Canvas.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Presentation.Canvas"].concat(__slice.call(args), [function(that, container) {
              var SVG, SVGHeight, SVGWidth, annoExpr, canvasHeight, canvasWidth, dataView, highlightDS, options, pendingSVGfctns, realCanvas, svgRoot, svgRootEl;

              options = that.options;
              highlightDS = null;
              annoExpr = that.dataView.prepare(['!target']);
              pendingSVGfctns = [];
              SVG = function(cb) {
                return pendingSVGfctns.push(cb);
              };
              svgRootEl = $("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     width=\"0\" height=\"0\"\n >\n</svg>");
              container.append(svgRootEl);
              svgRoot = $(svgRootEl).svg({
                onLoad: function(svg) {
                  var cb, _i, _len;

                  SVG = function(cb) {
                    return cb(svg);
                  };
                  for (_i = 0, _len = pendingSVGfctns.length; _i < _len; _i++) {
                    cb = pendingSVGfctns[_i];
                    cb(svg);
                  }
                  return pendingSVGfctns = null;
                }
              });
              canvasWidth = null;
              canvasHeight = null;
              SVGHeight = null;
              SVGWidth = parseInt($(container).width() * 20 / 20, 10);
              MITHGrid.events.onWindowResize.addListener(function() {
                SVGWidth = parseInt($(container).width() * 20 / 20, 10);
                if ((canvasWidth != null) && canvasWidth > 0) {
                  return that.setScale(SVGWidth / canvasWidth);
                }
              });
              that.events.onScaleChange.addListener(function(s) {
                if ((canvasWidth != null) && (canvasHeight != null)) {
                  SVGHeight = parseInt(canvasHeight * s, 10);
                  return SVG(function(svgRoot) {
                    svgRootEl.attr({
                      width: canvasWidth,
                      height: canvasHeight
                    });
                    svgRoot.configure({
                      viewBox: "0 0 " + canvasWidth + " " + canvasHeight
                    });
                    return svgRootEl.css({
                      width: SVGWidth,
                      height: SVGHeight,
                      border: "0.5em solid #eeeeee",
                      "border-radius": "5px",
                      "background-color": "#ffffff"
                    });
                  });
                }
              });
              dataView = MITHGrid.Data.SubSet.initInstance({
                dataStore: options.dataView,
                expressions: ['!target'],
                key: null
              });
              realCanvas = null;
              return that.events.onCanvasChange.addListener(function(canvas) {
                var item, _ref, _ref1;

                dataView.setKey(canvas);
                item = dataView.getItem(canvas);
                canvasWidth = ((_ref = item.width) != null ? _ref[0] : void 0) || 1;
                canvasHeight = ((_ref1 = item.height) != null ? _ref1[0] : void 0) || 1;
                that.setScale(SVGWidth / canvasWidth);
                if (realCanvas != null) {
                  if (realCanvas.hide != null) {
                    realCanvas.hide();
                  }
                  if (realCanvas._destroy != null) {
                    realCanvas._destroy();
                  }
                }
                return SVG(function(svgRoot) {
                  svgRoot.clear();
                  return realCanvas = SGA.Reader.Presentation.Zone.initInstance(svgRoot.root(), {
                    types: options.types,
                    dataView: dataView,
                    application: options.application,
                    height: canvasHeight,
                    width: canvasWidth,
                    svgRoot: svgRoot
                  });
                });
              });
            }]));
          };
        });
      });
      SGAReader.namespace("Component", function(Component) {
        Component.namespace("ProgressBar", function(ProgressBar) {
          return ProgressBar.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHGrid.initInstance.apply(MITHGrid, ["SGA.Reader.Component.ProgressBar"].concat(__slice.call(args), [function(that, container) {
              that.events.onNumeratorChange.addListener(function(n) {
                var percent;

                percent = parseInt(100 * n / that.getDenominator(), 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.events.onDenominatorChange.addListener(function(d) {
                var percent;

                percent = parseInt(100 * that.getNumerator() / d, 10);
                if (percent > 100) {
                  percent = 100;
                }
                return $(container).find(".bar").css("width", percent + "%");
              });
              that.show = function() {
                return $(container).show();
              };
              return that.hide = function() {
                return $(container).hide();
              };
            }]));
          };
        });
        Component.namespace("SequenceSelector", function(SequenceSelector) {
          return SequenceSelector.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHGrid.Presentation).initInstance.apply(_ref, ["SGA.Reader.Component.SequenceSelector"].concat(__slice.call(args), [function(that, container) {
              var options;

              options = that.options;
              that.addLens('Sequence', function(container, view, model, id) {
                var el, item, rendering, _ref;

                rendering = {};
                item = model.getItem(id);
                el = $("<option></option>");
                el.attr({
                  value: id
                });
                el.text((_ref = item.label) != null ? _ref[0] : void 0);
                return $(container).append(el);
              });
              $(container).change(function() {
                return that.setSequence($(container).val());
              });
              return that.finishDisplayUpdate = function() {
                return that.setSequence($(container).val());
              };
            }]));
          };
        });
        Component.namespace("Slider", function(Slider) {
          return Slider.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHGrid.initInstance.apply(MITHGrid, ["SGA.Reader.Component.Slider"].concat(__slice.call(args), [function(that, container) {
              that.events.onMinChange.addListener(function(n) {
                return $(container).attr({
                  min: n
                });
              });
              that.events.onMaxChange.addListener(function(n) {
                return $(container).attr({
                  max: n
                });
              });
              that.events.onValueChange.addListener(function(n) {
                return $(container).val(n);
              });
              return $(container).change(function(e) {
                return that.setValue($(container).val());
              });
            }]));
          };
        });
        return Component.namespace("PagerControls", function(PagerControls) {
          return PagerControls.initInstance = function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return MITHGrid.initInstance.apply(MITHGrid, ["SGA.Reader.Component.PagerControls"].concat(__slice.call(args), [function(that, container) {
              var firstEl, lastEl, nextEl, prevEl;

              firstEl = $(container).find(".icon-fast-backward").parent();
              prevEl = $(container).find(".icon-step-backward").parent();
              nextEl = $(container).find(".icon-step-forward").parent();
              lastEl = $(container).find(".icon-fast-forward").parent();
              that.events.onMinChange.addListener(function(n) {
                if (n < that.getValue()) {
                  firstEl.removeClass("disabled");
                  return prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  return prevEl.addClass("disabled");
                }
              });
              that.events.onMaxChange.addListener(function(n) {
                if (n > that.getValue()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disbaled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              that.events.onValueChange.addListener(function(n) {
                if (n > that.getMin()) {
                  firstEl.removeClass("disabled");
                  prevEl.removeClass("disabled");
                } else {
                  firstEl.addClass("disabled");
                  prevEl.addClass("disabled");
                }
                if (n < that.getMax()) {
                  nextEl.removeClass("disabled");
                  return lastEl.removeClass("disabled");
                } else {
                  nextEl.addClass("disabled");
                  return lastEl.addClass("disabled");
                }
              });
              $(prevEl).click(function(e) {
                e.preventDefault();
                return that.addValue(-1);
              });
              $(nextEl).click(function(e) {
                e.preventDefault();
                return that.addValue(1);
              });
              $(firstEl).click(function(e) {
                e.preventDefault();
                return that.setValue(that.getMin());
              });
              return $(lastEl).click(function(e) {
                e.preventDefault();
                return that.setValue(that.getMax());
              });
            }]));
          };
        });
      });
      return SGAReader.namespace("Application", function(Application) {
        return Application.namespace("SharedCanvas", function(SharedCanvas) {
          SharedCanvas.initInstance = function() {
            var args, _ref;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (_ref = MITHGrid.Application).initInstance.apply(_ref, ["SGA.Reader.Application.SharedCanvas"].concat(__slice.call(args), [function(that) {
              var currentSequence, extractSpatialConstraint, extractTextBody, extractTextTarget, loadManifests, manifestData, options, presentations, pullData, textSource;

              options = that.options;
              presentations = [];
              that.addPresentation = function(config) {
                var p;

                p = SGA.Reader.Presentation.Canvas.initInstance(config.container, {
                  types: config.types,
                  application: function() {
                    return that;
                  },
                  dataView: that.dataView.canvasAnnotations
                });
                return presentations.push([p, config.container]);
              };
              currentSequence = null;
              that.events.onSequenceChange.addListener(function(s) {
                var p, seq;

                currentSequence = s;
                seq = that.dataStore.data.getItem(currentSequence);
                p = 0;
                if ((seq != null ? seq.sequence : void 0) != null) {
                  p = seq.sequence.indexOf(that.getCanvas());
                }
                if (p < 0) {
                  p = 0;
                }
                return that.setPosition(p);
              });
              that.events.onPositionChange.addListener(function(p) {
                var canvasKey, seq, _ref;

                seq = that.dataStore.data.getItem(currentSequence);
                canvasKey = (_ref = seq.sequence) != null ? _ref[p] : void 0;
                return that.setCanvas(canvasKey);
              });
              that.events.onCanvasChange.addListener(function(k) {
                var p, pp, seq, _i, _len;

                that.dataView.canvasAnnotations.setKey(k);
                seq = that.dataStore.data.getItem(currentSequence);
                p = seq.sequence.indexOf(k);
                if (p >= 0 && p !== that.getPosition()) {
                  that.setPosition(p);
                }
                for (_i = 0, _len = presentations.length; _i < _len; _i++) {
                  pp = presentations[_i];
                  pp[0].setCanvas(k);
                }
                return k;
              });
              manifestData = SGA.Reader.Data.Manifest.initInstance();
              that.events.onItemsProcessedChange = manifestData.events.onItemsProcessedChange;
              that.events.onItemsToProcessChange = manifestData.events.onItemsToProcessChange;
              that.getItemsProcessed = manifestData.getItemsProcessed;
              that.getItemsToProcess = manifestData.getItemsToProcess;
              that.setItemsProcessed = manifestData.setItemsProcessed;
              that.setItemsToProcess = manifestData.setItemsToProcess;
              that.addItemsProcessed = manifestData.addItemsProcessed;
              that.addItemsToProcess = manifestData.addItemsToProcess;
              textSource = SGA.Reader.Data.TextStore.initInstance();
              that.withSource = textSource.withFile;
              extractSpatialConstraint = function(item, id) {
                var bits, constraint, _ref, _ref1;

                if (id == null) {
                  return;
                }
                constraint = manifestData.getItem(id);
                if (__indexOf.call(constraint.type, 'oaFragmentSelector') >= 0) {
                  if (constraint.rdfvalue[0].substr(0, 5) === "xywh=") {
                    item.shape = "Rectangle";
                    bits = constraint.rdfvalue[0].substr(5).split(",");
                    item.x = parseInt(bits[0], 10);
                    item.y = parseInt(bits[1], 10);
                    item.width = parseInt(bits[2], 10);
                    return item.height = parseInt(bits[3], 10);
                  }
                } else {
                  if (constraint.oaxbegin != null) {
                    item.start = parseInt((_ref = constraint.oaxbegin) != null ? _ref[0] : void 0, 10);
                  }
                  if (constraint.oaxend != null) {
                    return item.end = parseInt((_ref1 = constraint.oaxend) != null ? _ref1[0] : void 0, 10);
                  }
                }
              };
              extractTextTarget = function(item, id) {
                var styleItem, target, _ref;

                if (id == null) {
                  return;
                }
                target = manifestData.getItem(id);
                if (__indexOf.call(target.type, "oaSpecificResource") >= 0) {
                  item.target = target.oahasSource;
                  if (target.oahasStyle != null) {
                    styleItem = manifestData.getItem(target.oahasStyle[0]);
                    if (__indexOf.call(styleItem.dcformat, "text/css") >= 0) {
                      item.css = styleItem.cntchars;
                    }
                  }
                  return extractSpatialConstraint(item, (_ref = target.oahasSelector) != null ? _ref[0] : void 0);
                } else {
                  return item.target = id;
                }
              };
              extractTextBody = function(item, id) {
                var body, _ref;

                if (id == null) {
                  return;
                }
                body = manifestData.getItem(id);
                textSource.addFile(body.oahasSource);
                item.source = body.oahasSource;
                return extractSpatialConstraint(item, (_ref = body.oahasSelector) != null ? _ref[0] : void 0);
              };
              pullData = function() {
                var annos, canvases, items, seq, syncer, textAnnos, textSources, zones;

                items = [];
                syncer = MITHGrid.initSynchronizer();
                canvases = manifestData.getCanvases();
                that.addItemsToProcess(canvases.length);
                syncer.process(canvases, function(id) {
                  var mitem, _ref, _ref1;

                  that.addItemsProcessed(1);
                  mitem = manifestData.getItem(id);
                  return items.push({
                    id: id,
                    type: 'Canvas',
                    width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                    height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                    label: mitem.dctitle || mitem.rdfslabel
                  });
                });
                zones = manifestData.getZones();
                that.addItemsToProcess(zones.length);
                syncer.process(zones, function(id) {
                  var zitem, _ref, _ref1, _ref2;

                  that.addItemsProcessed(1);
                  zitem = manifestData.getItem(id);
                  return items.push({
                    id: id,
                    type: 'Zone',
                    width: parseInt((_ref = mitem.exifwidth) != null ? _ref[0] : void 0, 10),
                    height: parseInt((_ref1 = mitem.exifheight) != null ? _ref1[0] : void 0, 10),
                    angle: parseInt((_ref2 = mitem.scnaturalAngle) != null ? _ref2[0] : void 0, 10) || 0,
                    label: zitem.rdfslabel
                  });
                });
                seq = manifestData.getSequences();
                that.addItemsToProcess(seq.length);
                syncer.process(seq, function(id) {
                  var item, sitem;

                  that.addItemsProcessed(1);
                  sitem = manifestData.getItem(id);
                  item = {
                    id: id,
                    type: 'Sequence',
                    label: sitem.rdfslabel
                  };
                  seq = [];
                  seq.push(sitem.rdffirst[0]);
                  sitem = manifestData.getItem(sitem.rdfrest[0]);
                  while (sitem.id != null) {
                    seq.push(sitem.rdffirst[0]);
                    sitem = manifestData.getItem(sitem.rdfrest[0]);
                  }
                  item.sequence = seq;
                  return items.push(item);
                });
                textSources = {};
                textAnnos = [];
                annos = manifestData.getAnnotations();
                that.addItemsToProcess(annos.length);
                syncer.process(annos, function(id) {
                  var aitem, array, f, imgitem, item, sgaTypes, target, _name, _ref, _ref1, _ref2, _ref3, _ref4;

                  that.addItemsProcessed(1);
                  aitem = manifestData.getItem(id);
                  array = null;
                  item = {
                    id: id
                  };
                  if (__indexOf.call(aitem.type, "scContentAnnotation") >= 0) {
                    extractTextTarget(item, (_ref = aitem.oahasTarget) != null ? _ref[0] : void 0);
                    extractTextBody(item, (_ref1 = aitem.oahasBody) != null ? _ref1[0] : void 0);
                    if ((_ref2 = textSources[_name = item.source]) == null) {
                      textSources[_name] = [];
                    }
                    textSources[item.source].push([id, item.start, item.end]);
                    item.type = "TextContent";
                    array = items;
                  } else if (__indexOf.call(aitem.type, "scImageAnnotation") >= 0) {
                    imgitem = manifestData.getItem(aitem.oahasBody);
                    if ($.isArray(imgitem)) {
                      imgitem = imgitem[0];
                    }
                    array = items;
                    item.target = aitem.oahasTarget;
                    item.label = aitem.rdfslabel;
                    item.image = imgitem.oahasSource || aitem.oahasBody;
                    item.type = __indexOf.call(imgitem["dcformat"], "image/jp2") >= 0 ? "ImageViewer" : "Image";
                  } else if (__indexOf.call(aitem.type, "scZoneAnnotation") >= 0) {
                    target = manifestData.getItem(aitem.oahasTarget);
                    extractSpatialConstraint(item, (_ref3 = target.hasSelector) != null ? _ref3[0] : void 0);
                    array = items;
                    item.target = target.hasSource;
                    item.label = aitem.rdfslabel;
                    item.type = "ZoneAnnotation";
                  } else {
                    sgaTypes = (function() {
                      var _i, _len, _ref4, _results;

                      _ref4 = aitem.type;
                      _results = [];
                      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                        f = _ref4[_i];
                        if (f.substr(0, 3) === "sga" && f.substr(f.length - 10) === "Annotation") {
                          _results.push(f.substr(3));
                        }
                      }
                      return _results;
                    })();
                    if (sgaTypes.length > 0) {
                      extractTextTarget(item, (_ref4 = aitem.oahasTarget) != null ? _ref4[0] : void 0);
                      item.type = sgaTypes;
                      array = textAnnos;
                    }
                  }
                  if ((item.type != null) && (array != null)) {
                    return array.push(item);
                  }
                });
                return syncer.done(function() {
                  that.addItemsToProcess(1 + textAnnos.length);
                  return that.dataStore.data.loadItems(items, function() {
                    var item, modInfo, modend, modstart, s, setMod, source, sources, _fn, _i, _j, _len, _len1;

                    items = [];
                    modstart = {};
                    modend = {};
                    modInfo = {};
                    setMod = function(item) {
                      var end, id, source, start, _base, _base1, _ref, _ref1, _ref2, _ref3;

                      source = item.target;
                      start = item.start;
                      end = item.end;
                      id = item.id;
                      if ($.isArray(id)) {
                        id = id[0];
                      }
                      modInfo[id] = item;
                      if ((_ref = modstart[source]) == null) {
                        modstart[source] = {};
                      }
                      if ((_ref1 = (_base = modstart[source])[start]) == null) {
                        _base[start] = [];
                      }
                      modstart[source][start].push(id);
                      if ((_ref2 = modend[source]) == null) {
                        modend[source] = {};
                      }
                      if ((_ref3 = (_base1 = modend[source])[end]) == null) {
                        _base1[end] = [];
                      }
                      return modend[source][end].push(id);
                    };
                    for (_i = 0, _len = textAnnos.length; _i < _len; _i++) {
                      item = textAnnos[_i];
                      setMod(item);
                    }
                    sources = (function() {
                      var _results;

                      _results = [];
                      for (s in modstart) {
                        _results.push(s);
                      }
                      return _results;
                    })();
                    that.addItemsToProcess(sources.length);
                    that.addItemsProcessed(textAnnos.length);
                    _fn = function(source) {
                      return that.withSource(source, function(text) {
                        var br_pushed, id, idx, last_pos, makeLinebreak, makeTextItems, mends, modIds, mstarts, needs_br, p, pos, positions, processNode, pushTextItem, textItems, _k, _l, _len2, _len3, _len4, _m, _ref, _ref1;

                        textItems = [];
                        modIds = [];
                        br_pushed = false;
                        pushTextItem = function(classes, css, target, start, end) {
                          return textItems.push({
                            type: classes,
                            css: css.join(" "),
                            text: text.slice(start, end),
                            id: source + "-" + start + "-" + end,
                            target: target,
                            start: start,
                            end: end
                          });
                        };
                        processNode = function(start, end) {
                          var classes, css, id, _k, _len2;

                          classes = [];
                          css = [];
                          for (_k = 0, _len2 = modIds.length; _k < _len2; _k++) {
                            id = modIds[_k];
                            classes.push(modInfo[id].type);
                            if ($.isArray(modInfo[id].css)) {
                              css.push(modInfo[id].css.join(" "));
                            } else {
                              css.push(modInfo[id].css);
                            }
                          }
                          if (classes.length === 0) {
                            classes.push("Text");
                          }
                          return makeTextItems(start, end, classes, css);
                        };
                        makeTextItems = function(start, end, classes, css) {
                          var candidate, e, _k, _len2, _ref;

                          _ref = textSources[source] || [];
                          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                            candidate = _ref[_k];
                            if (start <= candidate[2] && end >= candidate[1]) {
                              s = Math.min(Math.max(start, candidate[1]), candidate[2]);
                              e = Math.max(Math.min(end, candidate[2]), candidate[1]);
                              pushTextItem(classes, css, candidate[0], s, e);
                            }
                          }
                          return false;
                        };
                        makeLinebreak = function(pos) {
                          var classes;

                          classes = ["LineBreak"];
                          return makeTextItems(pos, pos, classes, [""]);
                        };
                        mstarts = modstart[source] || [];
                        mends = modend[source] || [];
                        last_pos = 0;
                        positions = ((function() {
                          var _results;

                          _results = [];
                          for (p in mstarts) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).concat((function() {
                          var _results;

                          _results = [];
                          for (p in mends) {
                            _results.push(parseInt(p, 10));
                          }
                          return _results;
                        })()).sort(function(a, b) {
                          return a - b;
                        });
                        for (_k = 0, _len2 = positions.length; _k < _len2; _k++) {
                          pos = positions[_k];
                          if (pos !== last_pos) {
                            processNode(last_pos, pos);
                            if (br_pushed && !text.substr(last_pos, pos - last_pos).match(/^\s*$/)) {
                              br_pushed = false;
                            }
                            needs_br = false;
                            _ref = mstarts[pos] || [];
                            for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
                              id = _ref[_l];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              modIds.push(id);
                            }
                            _ref1 = mends[pos] || [];
                            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
                              id = _ref1[_m];
                              if (__indexOf.call(modInfo[id].type, "LineAnnotation") >= 0) {
                                needs_br = true;
                              }
                              idx = modIds.indexOf(id);
                              if (idx > -1) {
                                modIds.splice(idx, 1);
                              }
                            }
                            if (needs_br && !br_pushed) {
                              makeLinebreak(pos);
                              br_pushed = true;
                            }
                            last_pos = pos;
                          }
                        }
                        processNode(last_pos, text.length);
                        return that.dataStore.data.loadItems(textItems, function() {
                          return that.addItemsProcessed(1);
                        });
                      });
                    };
                    for (_j = 0, _len1 = sources.length; _j < _len1; _j++) {
                      source = sources[_j];
                      _fn(source);
                    }
                    return that.addItemsProcessed(1);
                  });
                });
              };
              loadManifests = function(url) {
                if (url.length > 1) {
                  return manifestData.importFromURL(url[0], function() {
                    return loadManifests(url.slice(1, +url.length + 1 || 9e9));
                  });
                } else {
                  return manifestData.importFromURL(url[0], function() {
                    return pullData();
                  });
                }
              };
              that.loadManifests = loadManifests;
              if (options.url != null) {
                return loadManifests([options.url]);
              }
            }]));
          };
          return SharedCanvas.builder = function(config) {
            var manifestCallbacks, that, updateProgressTracker, updateProgressTrackerVisibility, uptv, uptvTimer, _ref;

            that = {
              manifests: {}
            };
            manifestCallbacks = {};
            updateProgressTracker = function() {};
            updateProgressTrackerVisibility = function() {};
            if (config.progressTracker != null) {
              updateProgressTracker = function() {
                var d, m, n, obj, _ref;

                n = 0;
                d = 0;
                _ref = that.manifests;
                for (m in _ref) {
                  obj = _ref[m];
                  n += obj.getItemsProcessed();
                  d += obj.getItemsToProcess();
                }
                config.progressTracker.setNumerator(n);
                return config.progressTracker.setDenominator(d || 1);
              };
              uptv = null;
              uptvTimer = 1000;
              updateProgressTrackerVisibility = function() {
                if (uptv != null) {
                  return uptvTimer = 500;
                } else {
                  uptv = function() {
                    var m, obj, _ref;

                    _ref = that.manifests;
                    for (m in _ref) {
                      obj = _ref[m];
                      if (obj.getItemsToProcess() > obj.getItemsProcessed()) {
                        config.progressTracker.show();
                        uptvTimer /= 2;
                        if (uptvTimer < 500) {
                          uptvTimer = 500;
                        }
                        setTimeout(uptv, uptvTimer);
                        return;
                      }
                    }
                    if (uptvTimer > 500) {
                      config.progressTracker.hide();
                    }
                    uptvTimer *= 2;
                    if (uptvTimer > 10000) {
                      uptvTimer = 10000;
                    }
                    return setTimeout(uptv, uptvTimer);
                  };
                  return uptv();
                }
              };
            }
            that.onManifest = function(url, cb) {
              var _ref;

              if (that.manifests[url] != null) {
                return that.manifests[url].ready(function() {
                  return cb(that.manifests[url]);
                });
              } else {
                if ((_ref = manifestCallbacks[url]) == null) {
                  manifestCallbacks[url] = [];
                }
                return manifestCallbacks[url].push(cb);
              }
            };
            that.addPresentation = function(el) {
              var manifest, manifestUrl, types, _ref;

              manifestUrl = $(el).data('manifest');
              if (manifestUrl != null) {
                manifest = that.manifests[manifestUrl];
                if (manifest == null) {
                  manifest = Application.SharedCanvas.initInstance({
                    url: manifestUrl
                  });
                  that.manifests[manifestUrl] = manifest;
                  manifest.ready(function() {
                    var cb, cbs, _i, _len;

                    cbs = manifestCallbacks[manifestUrl] || [];
                    for (_i = 0, _len = cbs.length; _i < _len; _i++) {
                      cb = cbs[_i];
                      cb(manifest);
                    }
                    return delete manifestCallbacks[manifestUrl];
                  });
                  manifest.events.onItemsToProcessChange.addListener(updateProgressTracker);
                  manifest.events.onItemsProcessedChange.addListener(updateProgressTracker);
                  updateProgressTrackerVisibility();
                }
                manifest.run();
                types = (_ref = $(el).data('types')) != null ? _ref.split(/\s*,\s*/) : void 0;
                return that.onManifest(manifestUrl, function(manifest) {
                  return manifest.addPresentation({
                    types: types,
                    container: $(el)
                  });
                });
              }
            };
            if ((_ref = config["class"]) == null) {
              config["class"] = ".canvas";
            }
            $(config["class"]).each(function(idx, el) {
              return that.addPresentation(el);
            });
            return that;
          };
        });
      });
    });
  })(jQuery, MITHGrid);

  MITHGrid.defaults('SGA.Reader.Application.SharedCanvas', {
    dataStores: {
      data: {
        types: {
          Sequence: {},
          Canvas: {}
        },
        properties: {
          target: {
            valueType: 'item'
          }
        }
      }
    },
    dataViews: {
      canvasAnnotations: {
        dataStore: 'data',
        type: MITHGrid.Data.SubSet,
        expressions: ['!target']
      },
      sequences: {
        dataStore: 'data',
        types: ['Sequence']
      }
    },
    variables: {
      Canvas: {
        is: 'rw'
      },
      Sequence: {
        is: 'rw'
      },
      Position: {
        is: 'lrw',
        isa: 'numeric'
      }
    }
  });

  MITHGrid.defaults('SGA.Reader.Component.Slider', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHGrid.defaults('SGA.Reader.Component.PagerControls', {
    variables: {
      Min: {
        is: 'rw',
        isa: 'numeric'
      },
      Max: {
        is: 'rw',
        isa: 'numeric'
      },
      Value: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHGrid.defaults('SGA.Reader.Component.SequenceSelector', {
    variables: {
      Sequence: {
        is: 'rw'
      }
    }
  });

  MITHGrid.defaults('SGA.Reader.Component.ProgressBar', {
    variables: {
      Numerator: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      Denominator: {
        is: 'rw',
        "default": 1,
        isa: 'numeric'
      }
    },
    viewSetup: "<div class=\"progress progress-striped active\">\n  <div class=\"bar\" style=\"width: 0%;\"></div>\n</div>"
  });

  MITHGrid.defaults('SGA.Reader.Presentation.Canvas', {
    variables: {
      Canvas: {
        is: 'rw'
      },
      Scale: {
        is: 'rw',
        isa: 'numeric'
      }
    }
  });

  MITHGrid.defaults('SGA.Reader.Data.Manifest', {
    variables: {
      ItemsToProcess: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      },
      ItemsProcessed: {
        is: 'rw',
        "default": 0,
        isa: 'numeric'
      }
    }
  });

}).call(this);
